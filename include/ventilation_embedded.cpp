//
// File: ventilation_embedded.cpp
//
// Code generated for Simulink model 'ventilation_embedded'.
//
// Model version                  : 2.8
// Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020
// C/C++ source code generated on : Fri Aug 27 10:31:22 2021
//
// Target selection: ert.tlc
// Embedded hardware selection: Intel->x86-64 (Linux 64)
// Code generation objectives:
//    1. Execution efficiency
//    2. RAM efficiency
// Validation result: Not run
//
#include "ventilation_embedded.h"

// Named constants for Chart: '<S46>/TunnelLine1'
const uint8_T IN_ActiveState = 1U;
const uint8_T IN_HysteresisStateHigh = 1U;
const uint8_T IN_HysteresisStateLow = 2U;
const uint8_T IN_InterpolationState = 3U;
const uint8_T IN_NO_ACTIVE_CHILD = 0U;
const uint8_T IN_ReadyState2 = 2U;
const uint8_T IN_ReadyState3 = 3U;

// Named constants for Chart: '<S2>/MTSetpointToFanMapping'
const uint8_T IN_ErrorHigh = 1U;
const uint8_T IN_ErrorLow = 2U;
const uint8_T IN_TunnelLine1 = 3U;
const uint8_T IN_TunnelLine10 = 4U;
const uint8_T IN_TunnelLine11 = 5U;
const uint8_T IN_TunnelLine12 = 6U;
const uint8_T IN_TunnelLine13 = 7U;
const uint8_T IN_TunnelLine14 = 8U;
const uint8_T IN_TunnelLine15 = 9U;
const uint8_T IN_TunnelLine16 = 10U;
const uint8_T IN_TunnelLine17 = 11U;
const uint8_T IN_TunnelLine18 = 12U;
const uint8_T IN_TunnelLine19 = 13U;
const uint8_T IN_TunnelLine2 = 14U;
const uint8_T IN_TunnelLine20 = 15U;
const uint8_T IN_TunnelLine21 = 16U;
const uint8_T IN_TunnelLine22 = 17U;
const uint8_T IN_TunnelLine23 = 18U;
const uint8_T IN_TunnelLine24 = 19U;
const uint8_T IN_TunnelLine25 = 20U;
const uint8_T IN_TunnelLine26 = 21U;
const uint8_T IN_TunnelLine27 = 22U;
const uint8_T IN_TunnelLine28 = 23U;
const uint8_T IN_TunnelLine29 = 24U;
const uint8_T IN_TunnelLine3 = 25U;
const uint8_T IN_TunnelLine30 = 26U;
const uint8_T IN_TunnelLine31 = 27U;
const uint8_T IN_TunnelLine32 = 28U;
const uint8_T IN_TunnelLine4 = 29U;
const uint8_T IN_TunnelLine5 = 30U;
const uint8_T IN_TunnelLine6 = 31U;
const uint8_T IN_TunnelLine7 = 32U;
const uint8_T IN_TunnelLine8 = 33U;
const uint8_T IN_TunnelLine9 = 34U;

// Named constants for Chart: '<S10>/OnOffFansNoModulation'
const uint8_T IN_InletsAreNowOpen = 1U;
const uint8_T IN_SinglePreRunCycleOnOffFansWithoutModulation = 1U;
const uint8_T IN_WaitForInletsToOpen = 2U;
const uint8_T IN_WaitForStartCondition = 2U;

// Named constants for Chart: '<S10>/OnOffFansWithModulation'
const uint8_T IN_FansAreFollowingInletState = 1U;
const uint8_T IN_MainTimerWithTriggerInlets = 1U;
const uint8_T IN_ModulationOffTimer = 1U;
const uint8_T IN_ModulationOnTimer = 2U;
const uint8_T IN_OffMainModulationTimer = 1U;
const uint8_T IN_OnMainModulationTimer = 2U;
const uint8_T IN_WaitForInletsToOpenAfterLineChange = 3U;
const uint8_T IN_WaitForInletsToOpenNormal = 4U;

// Named constants for Chart: '<S13>/VarFansNoModulation'
const uint8_T IN_SinglePreRunCycleVariableFansWithoutModulation = 1U;

// Named constants for Chart: '<S13>/VarFansWithModulation'
const uint8_T IN_OnOffFanWaitForStartCondition = 2U;

// Named constants for Chart: '<S6>/InletsModulation'
const uint8_T IN_DetectMappingLineChange = 1U;
const uint8_T IN_InletsAlreadyOpen = 1U;
const uint8_T IN_InletsAreClosed = 2U;
const uint8_T IN_InletsAreClosing = 3U;
const uint8_T IN_InletsAreOpen = 4U;
const uint8_T IN_InletsAreOpening = 5U;
const uint8_T IN_WaitForTrigger = 2U;

// Named constants for Chart: '<S7>/StepDelayTimer_Stateflow'
const uint8_T IN_InhibitOtherFansDuringTimeout = 1U;
const uint8_T IN_Initialize = 1U;
const uint8_T IN_OnSequencerState = 2U;
const uint8_T IN_Sequencer = 2U;

// Named constants for Chart: '<S45>/SwitchDelay'
const uint8_T IN_MTState = 1U;
const uint8_T IN_Timer = 1U;
const uint8_T IN_ToMTStateMonitor = 2U;
const uint8_T IN_TunnelState = 2U;

#define NumBitsPerChar                 8U
#include "solver_zc.h"
#include "zero_crossing_types.h"
#ifndef slZcHadEvent
#define slZcHadEvent(ev, zcsDir)       (((ev) & (zcsDir)) != 0x00 )
#endif

#ifndef slZcUnAliasEvents
#define slZcUnAliasEvents(evL, evR)    ((((slZcHadEvent((evL), (SL_ZCS_EVENT_N2Z)) && slZcHadEvent((evR), (SL_ZCS_EVENT_Z2P))) || (slZcHadEvent((evL), (SL_ZCS_EVENT_P2Z)) && slZcHadEvent((evR), (SL_ZCS_EVENT_Z2N)))) ? (SL_ZCS_EVENT_NUL) : (evR)))
#endif

static real32_T look1_iflf_lingc(real32_T u0, const real32_T bp0[], const
  real32_T table[], uint32_T maxIndex);
static int32_T look1_is32lftfIs32_binlca(int32_T u0, const int32_T bp0[], const
  real32_T table[], uint32_T maxIndex);
static real32_T look1_iflf_binlca(real32_T u0, const real32_T bp0[], const
  real32_T table[], uint32_T maxIndex);
extern "C" {
  static ZCEventType rt_ZCFcn(ZCDirection zcDir, ZCSigState *prevZc, real_T
    currValue);
}                                      // extern "C"
  extern "C"
{
  real_T rtInf;
  real_T rtMinusInf;
  real_T rtNaN;
  real32_T rtInfF;
  real32_T rtMinusInfF;
  real32_T rtNaNF;
}

extern "C" {
  //
  // Initialize rtNaN needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetNaN(void)
  {
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
    real_T nan = 0.0;
    if (bitsPerReal == 32U) {
      nan = rtGetNaNF();
    } else {
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF80000U;
      tmpVal.bitVal.words.wordL = 0x00000000U;
      nan = tmpVal.fltVal;
    }

    return nan;
  }

  //
  // Initialize rtNaNF needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetNaNF(void)
  {
    IEEESingle nanF = { { 0.0F } };

    nanF.wordL.wordLuint = 0xFFC00000U;
    return nanF.wordL.wordLreal;
  }
}
  extern "C"
{
  // Detect zero crossings events.
  static ZCEventType rt_ZCFcn(ZCDirection zcDir, ZCSigState* prevZc, real_T
    currValue)
  {
    slZcEventType zcsDir;
    slZcEventType tempEv;
    ZCEventType zcEvent = NO_ZCEVENT;  // assume

    // zcEvent matrix
    static const slZcEventType eventMatrix[4][4] = {
      //          ZER              POS              NEG              UNK
      { SL_ZCS_EVENT_NUL, SL_ZCS_EVENT_Z2P, SL_ZCS_EVENT_Z2N, SL_ZCS_EVENT_NUL },// ZER 

      { SL_ZCS_EVENT_P2Z, SL_ZCS_EVENT_NUL, SL_ZCS_EVENT_P2N, SL_ZCS_EVENT_NUL },// POS 

      { SL_ZCS_EVENT_N2Z, SL_ZCS_EVENT_N2P, SL_ZCS_EVENT_NUL, SL_ZCS_EVENT_NUL },// NEG 

      { SL_ZCS_EVENT_NUL, SL_ZCS_EVENT_NUL, SL_ZCS_EVENT_NUL, SL_ZCS_EVENT_NUL }// UNK 
    };

    // get prevZcEvent and prevZcSign from prevZc
    slZcEventType prevEv = (slZcEventType)(((uint8_T)(*prevZc)) >> 2);
    slZcSignalSignType prevSign = (slZcSignalSignType)(((uint8_T)(*prevZc)) &
      (uint8_T)0x03);

    // get current zcSignal sign from current zcSignal value
    slZcSignalSignType currSign = (slZcSignalSignType)((currValue) > 0.0 ?
      SL_ZCS_SIGN_POS :
      ((currValue) < 0.0 ? SL_ZCS_SIGN_NEG : SL_ZCS_SIGN_ZERO));

    // get current zcEvent based on prev and current zcSignal value
    slZcEventType currEv = eventMatrix[prevSign][currSign];

    // get slZcEventType from ZCDirection
    switch (zcDir) {
     case ANY_ZERO_CROSSING:
      zcsDir = SL_ZCS_EVENT_ALL;
      break;

     case FALLING_ZERO_CROSSING:
      zcsDir = SL_ZCS_EVENT_ALL_DN;
      break;

     case RISING_ZERO_CROSSING:
      zcsDir = SL_ZCS_EVENT_ALL_UP;
      break;

     default:
      zcsDir = SL_ZCS_EVENT_NUL;
      break;
    }

    //had event, check if double zc happend remove double detection.
    if (slZcHadEvent(currEv, zcsDir)) {
      currEv = (slZcEventType)(slZcUnAliasEvents(prevEv, currEv));
    } else {
      currEv = SL_ZCS_EVENT_NUL;
    }

    // Update prevZc
    tempEv = (slZcEventType)(currEv << 2);// shift left by 2 bits
    *prevZc = (ZCSigState)((currSign) | (tempEv));
    if ((currEv & SL_ZCS_EVENT_ALL_DN) != 0) {
      zcEvent = FALLING_ZCEVENT;
    } else if ((currEv & SL_ZCS_EVENT_ALL_UP) != 0) {
      zcEvent = RISING_ZCEVENT;
    } else {
      zcEvent = NO_ZCEVENT;
    }

    return zcEvent;
  }                                    // rt_ZCFcn
}

extern "C" {
  //
  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the
  // generated code. NaN is initialized as non-signaling. Assumes IEEE.
  //
  static void rt_InitInfAndNaN(size_t realSize)
  {
    (void) (realSize);
    rtNaN = rtGetNaN();
    rtNaNF = rtGetNaNF();
    rtInf = rtGetInf();
    rtInfF = rtGetInfF();
    rtMinusInf = rtGetMinusInf();
    rtMinusInfF = rtGetMinusInfF();
  }

  // Test if value is infinite
  static boolean_T rtIsInf(real_T value)
  {
    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
  }

  // Test if single-precision value is infinite
  static boolean_T rtIsInfF(real32_T value)
  {
    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
  }

  // Test if value is not a number
  static boolean_T rtIsNaN(real_T value)
  {
    boolean_T result = (boolean_T) 0;
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
    if (bitsPerReal == 32U) {
      result = rtIsNaNF((real32_T)value);
    } else {
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.fltVal = value;
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
                           0x7FF00000 &&
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
                            (tmpVal.bitVal.words.wordL != 0) ));
    }

    return result;
  }

  // Test if single-precision value is not a number
  static boolean_T rtIsNaNF(real32_T value)
  {
    IEEESingle tmp;
    tmp.wordL.wordLreal = value;
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
  }
}
  extern "C"
{
  //
  // Initialize rtInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetInf(void)
  {
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
    real_T inf = 0.0;
    if (bitsPerReal == 32U) {
      inf = rtGetInfF();
    } else {
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0x7FF00000U;
      tmpVal.bitVal.words.wordL = 0x00000000U;
      inf = tmpVal.fltVal;
    }

    return inf;
  }

  //
  // Initialize rtInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetInfF(void)
  {
    IEEESingle infF;
    infF.wordL.wordLuint = 0x7F800000U;
    return infF.wordL.wordLreal;
  }

  //
  // Initialize rtMinusInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetMinusInf(void)
  {
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
    real_T minf = 0.0;
    if (bitsPerReal == 32U) {
      minf = rtGetMinusInfF();
    } else {
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF00000U;
      tmpVal.bitVal.words.wordL = 0x00000000U;
      minf = tmpVal.fltVal;
    }

    return minf;
  }

  //
  // Initialize rtMinusInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetMinusInfF(void)
  {
    IEEESingle minfF;
    minfF.wordL.wordLuint = 0xFF800000U;
    return minfF.wordL.wordLreal;
  }
}

static real32_T look1_iflf_lingc(real32_T u0, const real32_T bp0[], const
  real32_T table[], uint32_T maxIndex)
{
  real32_T frac;
  uint32_T bpIdx;

  // Column-major Lookup 1-D
  // Search method: 'linear'
  // Use previous index: 'off'
  // Interpolation method: 'Linear Lagrange'
  // Extrapolation method: 'Clip'
  // Use last breakpoint for index at or above upper limit: 'off'
  // Remove protection against out-of-range input in generated code: 'off'

  // Prelookup - Index and Fraction
  // Index Search method: 'linear'
  // Extrapolation method: 'Clip'
  // Use previous index: 'off'
  // Use last breakpoint for index at or above upper limit: 'off'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u0 <= bp0[0U]) {
    bpIdx = 0U;
    frac = 0.0F;
  } else if (u0 < bp0[maxIndex]) {
    // Linear Search
    for (bpIdx = maxIndex >> 1U; u0 < bp0[bpIdx]; bpIdx--) {
    }

    while (u0 >= bp0[bpIdx + 1U]) {
      bpIdx++;
    }

    frac = (u0 - bp0[bpIdx]) / (bp0[bpIdx + 1U] - bp0[bpIdx]);
  } else {
    bpIdx = maxIndex - 1U;
    frac = 1.0F;
  }

  // Column-major Interpolation 1-D
  // Interpolation method: 'Linear Lagrange'
  // Use last breakpoint for index at or above upper limit: 'off'
  // Overflow mode: 'wrapping'

  return (1.0F - frac) * table[bpIdx] + table[bpIdx + 1U] * frac;
}

static int32_T look1_is32lftfIs32_binlca(int32_T u0, const int32_T bp0[], const
  real32_T table[], uint32_T maxIndex)
{
  int32_T bpLeftVar;
  int32_T y;
  real32_T frac;
  real32_T yL_0d0;
  uint32_T bpIdx;
  uint32_T iLeft;
  uint32_T iRght;

  // Column-major Lookup 1-D
  // Search method: 'binary'
  // Use previous index: 'off'
  // Interpolation method: 'Linear point-slope'
  // Extrapolation method: 'Clip'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  // Prelookup - Index and Fraction
  // Index Search method: 'binary'
  // Extrapolation method: 'Clip'
  // Use previous index: 'off'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u0 <= bp0[0U]) {
    iLeft = 0U;
    frac = 0.0F;
  } else if (u0 < bp0[maxIndex]) {
    // Binary Search
    bpIdx = maxIndex >> 1U;
    iLeft = 0U;
    iRght = maxIndex;
    while (iRght - iLeft > 1U) {
      if (u0 < bp0[bpIdx]) {
        iRght = bpIdx;
      } else {
        iLeft = bpIdx;
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    bpLeftVar = bp0[iLeft];
    frac = static_cast<real32_T>(static_cast<uint32_T>(u0) - bpLeftVar) /
      static_cast<real32_T>(static_cast<uint32_T>(bp0[iLeft + 1U]) - bpLeftVar);
  } else {
    iLeft = maxIndex;
    frac = 0.0F;
  }

  // Column-major Interpolation 1-D
  // Interpolation method: 'Linear point-slope'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Overflow mode: 'wrapping'

  if (iLeft == maxIndex) {
    y = static_cast<int32_T>(table[iLeft]);
  } else {
    yL_0d0 = table[iLeft];
    y = static_cast<int32_T>((table[iLeft + 1U] - yL_0d0) * frac) +
      static_cast<int32_T>(yL_0d0);
  }

  return y;
}

static real32_T look1_iflf_binlca(real32_T u0, const real32_T bp0[], const
  real32_T table[], uint32_T maxIndex)
{
  real32_T frac;
  real32_T y;
  real32_T yL_0d0;
  uint32_T bpIdx;
  uint32_T iLeft;
  uint32_T iRght;

  // Column-major Lookup 1-D
  // Search method: 'binary'
  // Use previous index: 'off'
  // Interpolation method: 'Linear point-slope'
  // Extrapolation method: 'Clip'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  // Prelookup - Index and Fraction
  // Index Search method: 'binary'
  // Extrapolation method: 'Clip'
  // Use previous index: 'off'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u0 <= bp0[0U]) {
    iLeft = 0U;
    frac = 0.0F;
  } else if (u0 < bp0[maxIndex]) {
    // Binary Search
    bpIdx = maxIndex >> 1U;
    iLeft = 0U;
    iRght = maxIndex;
    while (iRght - iLeft > 1U) {
      if (u0 < bp0[bpIdx]) {
        iRght = bpIdx;
      } else {
        iLeft = bpIdx;
      }

      bpIdx = (iRght + iLeft) >> 1U;
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
  } else {
    iLeft = maxIndex;
    frac = 0.0F;
  }

  // Column-major Interpolation 1-D
  // Interpolation method: 'Linear point-slope'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Overflow mode: 'wrapping'

  if (iLeft == maxIndex) {
    y = table[iLeft];
  } else {
    yL_0d0 = table[iLeft];
    y = (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
  }

  return y;
}

namespace NS_FANCOM
{
  // Function for Chart: '<S46>/TunnelLine1'
  real32_T FancomVentilationController::interp1(const real32_T varargin_1[2],
    const real32_T varargin_2[2], real32_T varargin_3)
  {
    int32_T exitg1;
    int32_T k;
    real32_T Vq;
    real32_T r;
    real32_T x_idx_1;
    real32_T y_idx_0;
    real32_T y_idx_1;
    y_idx_0 = varargin_2[0];
    r = varargin_1[0];
    y_idx_1 = varargin_2[1];
    x_idx_1 = varargin_1[1];
    Vq = 0.0F;
    k = 0;
    do {
      exitg1 = 0;
      if (k < 2) {
        if (rtIsNaNF(varargin_1[k])) {
          exitg1 = 1;
        } else {
          k++;
        }
      } else {
        if (varargin_1[1] < varargin_1[0]) {
          r = varargin_1[1];
          x_idx_1 = varargin_1[0];
          y_idx_0 = varargin_2[1];
          y_idx_1 = varargin_2[0];
        }

        if (rtIsNaNF(varargin_3)) {
          Vq = (rtNaNF);
        } else if (varargin_3 > x_idx_1) {
          Vq = (varargin_3 - x_idx_1) / (x_idx_1 - r) * (y_idx_1 - y_idx_0) +
            y_idx_1;
        } else if (varargin_3 < r) {
          Vq = (varargin_3 - r) / (x_idx_1 - r) * (y_idx_1 - y_idx_0) + y_idx_0;
        } else {
          r = (varargin_3 - r) / (x_idx_1 - r);
          if (r == 0.0F) {
            Vq = y_idx_0;
          } else if (r == 1.0F) {
            Vq = y_idx_1;
          } else if (y_idx_0 == y_idx_1) {
            Vq = y_idx_0;
          } else {
            Vq = (1.0F - r) * y_idx_0 + r * y_idx_1;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);

    return Vq;
  }

  // Function for Chart: '<S46>/TunnelLine1'
  void FancomVentilationController::exit_internal_ActiveState(DW_TunnelLine1
    *localDW)
  {
    localDW->bitsForTID0.is_CapacityControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_PressureControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_InletControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_VariableFanControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_ModulatingPercentage = IN_NO_ACTIVE_CHILD;
  }

  // Function for Chart: '<S46>/TunnelLine1'
  void FancomVentilationController::TableLine_during(const LineBus *LineData,
    boolean_T *HighReady, real32_T Setpoint, int32_T OnOffFans[20], real32_T
    VariableFans[8], real32_T Inlets[3], real32_T *Pressure, real32_T
    *VentilationCapacity, real32_T *ModulatingPercentage, boolean_T *LowReady,
    int32_T MaxLineAllowed, real32_T InletsLow[3], real32_T InletsHigh[3],
    real32_T VariableFansLow[8], real32_T VariableFansHigh[8], DW_TunnelLine1
    *localDW)
  {
    int32_T i;
    real32_T LineData_0[2];
    real32_T LineData_1[2];
    real32_T LineData_tmp;
    switch (localDW->bitsForTID0.is_c11_setpointtofanmapping_single_state_lib) {
     case IN_ActiveState:
      if ((Setpoint >= LineData->BreakpointHigh.X +
           LineData->BreakpointHigh.Hysteresis) && (LineData->LineNumber <
           MaxLineAllowed)) {
        exit_internal_ActiveState(localDW);
        localDW->bitsForTID0.is_c11_setpointtofanmapping_single_state_lib =
          IN_ReadyState2;
        *HighReady = true;
      } else if (Setpoint < LineData->BreakpointLow.X) {
        exit_internal_ActiveState(localDW);
        localDW->bitsForTID0.is_c11_setpointtofanmapping_single_state_lib =
          IN_ReadyState3;
        *LowReady = true;
      } else {
        switch (localDW->bitsForTID0.is_ModulatingPercentage) {
         case IN_HysteresisStateHigh:
          if (Setpoint < LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_ModulatingPercentage = IN_InterpolationState;
            LineData_0[0] = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->ModulationPercentageLow;
            LineData_1[1] = LineData->ModulationPercentageHigh;
            *ModulatingPercentage = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            *ModulatingPercentage = LineData->ModulationPercentageHigh;
          }
          break;

         case IN_HysteresisStateLow:
          LineData_tmp = LineData->BreakpointLow.X +
            LineData->BreakpointLow.Hysteresis;
          if (Setpoint > LineData_tmp) {
            localDW->bitsForTID0.is_ModulatingPercentage = IN_InterpolationState;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->ModulationPercentageLow;
            LineData_1[1] = LineData->ModulationPercentageHigh;
            *ModulatingPercentage = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            *ModulatingPercentage = LineData->ModulationPercentageLow;
          }
          break;

         default:
          // case IN_InterpolationState:
          if (Setpoint > LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_ModulatingPercentage =
              IN_HysteresisStateHigh;
            *ModulatingPercentage = LineData->ModulationPercentageHigh;
          } else {
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            if (Setpoint < LineData_tmp) {
              localDW->bitsForTID0.is_ModulatingPercentage =
                IN_HysteresisStateLow;
              *ModulatingPercentage = LineData->ModulationPercentageLow;
            } else {
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->ModulationPercentageLow;
              LineData_1[1] = LineData->ModulationPercentageHigh;
              *ModulatingPercentage = interp1(LineData_0, LineData_1, Setpoint);
            }
          }
          break;
        }

        for (i = 0; i < 8; i++) {
          VariableFansLow[i] = LineData->VariableFansLow[i];
          VariableFansHigh[i] = LineData->VariableFansHigh[i];
        }

        switch (localDW->bitsForTID0.is_VariableFanControl) {
         case IN_HysteresisStateHigh:
          if (Setpoint < LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_VariableFanControl = IN_InterpolationState;
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[0];
            LineData_1[1] = LineData->VariableFansHigh[0];
            VariableFans[0] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[1];
            LineData_1[1] = LineData->VariableFansHigh[1];
            VariableFans[1] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[2];
            LineData_1[1] = LineData->VariableFansHigh[2];
            VariableFans[2] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[3];
            LineData_1[1] = LineData->VariableFansHigh[3];
            VariableFans[3] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[4];
            LineData_1[1] = LineData->VariableFansHigh[4];
            VariableFans[4] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[5];
            LineData_1[1] = LineData->VariableFansHigh[5];
            VariableFans[5] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[6];
            LineData_1[1] = LineData->VariableFansHigh[6];
            VariableFans[6] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[7];
            LineData_1[1] = LineData->VariableFansHigh[7];
            VariableFans[7] = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            i = 0;
            do {
              VariableFans[i] = LineData->VariableFansHigh[i];
              i++;
            } while (i + 1 <= 8);

            localDW->bitsForTID0.is_VariableFanControl = IN_HysteresisStateHigh;
          }
          break;

         case IN_HysteresisStateLow:
          LineData_tmp = LineData->BreakpointLow.X +
            LineData->BreakpointLow.Hysteresis;
          if (Setpoint > LineData_tmp) {
            localDW->bitsForTID0.is_VariableFanControl = IN_InterpolationState;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[0];
            LineData_1[1] = LineData->VariableFansHigh[0];
            VariableFans[0] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[1];
            LineData_1[1] = LineData->VariableFansHigh[1];
            VariableFans[1] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[2];
            LineData_1[1] = LineData->VariableFansHigh[2];
            VariableFans[2] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[3];
            LineData_1[1] = LineData->VariableFansHigh[3];
            VariableFans[3] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[4];
            LineData_1[1] = LineData->VariableFansHigh[4];
            VariableFans[4] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[5];
            LineData_1[1] = LineData->VariableFansHigh[5];
            VariableFans[5] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[6];
            LineData_1[1] = LineData->VariableFansHigh[6];
            VariableFans[6] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VariableFansLow[7];
            LineData_1[1] = LineData->VariableFansHigh[7];
            VariableFans[7] = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            i = 0;
            do {
              VariableFans[i] = LineData->VariableFansLow[i];
              i++;
            } while (i + 1 <= 8);

            localDW->bitsForTID0.is_VariableFanControl = IN_HysteresisStateLow;
          }
          break;

         default:
          // case IN_InterpolationState:
          if (Setpoint > LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_VariableFanControl = IN_HysteresisStateHigh;
          } else {
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            if (Setpoint < LineData_tmp) {
              localDW->bitsForTID0.is_VariableFanControl = IN_HysteresisStateLow;
            } else {
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[0];
              LineData_1[1] = LineData->VariableFansHigh[0];
              VariableFans[0] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[1];
              LineData_1[1] = LineData->VariableFansHigh[1];
              VariableFans[1] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[2];
              LineData_1[1] = LineData->VariableFansHigh[2];
              VariableFans[2] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[3];
              LineData_1[1] = LineData->VariableFansHigh[3];
              VariableFans[3] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[4];
              LineData_1[1] = LineData->VariableFansHigh[4];
              VariableFans[4] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[5];
              LineData_1[1] = LineData->VariableFansHigh[5];
              VariableFans[5] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[6];
              LineData_1[1] = LineData->VariableFansHigh[6];
              VariableFans[6] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VariableFansLow[7];
              LineData_1[1] = LineData->VariableFansHigh[7];
              VariableFans[7] = interp1(LineData_0, LineData_1, Setpoint);
            }
          }
          break;
        }

        std::memcpy(&OnOffFans[0], &LineData->OnOffFans[0], 20U * sizeof(int32_T));
        InletsLow[0] = LineData->InletsLow[0];
        InletsHigh[0] = LineData->InletsHigh[0];
        InletsLow[1] = LineData->InletsLow[1];
        InletsHigh[1] = LineData->InletsHigh[1];
        InletsLow[2] = LineData->InletsLow[2];
        InletsHigh[2] = LineData->InletsHigh[2];
        switch (localDW->bitsForTID0.is_InletControl) {
         case IN_HysteresisStateHigh:
          if (Setpoint < LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_InletControl = IN_InterpolationState;
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->InletsLow[0];
            LineData_1[1] = LineData->InletsHigh[0];
            Inlets[0] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->InletsLow[1];
            LineData_1[1] = LineData->InletsHigh[1];
            Inlets[1] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->InletsLow[2];
            LineData_1[1] = LineData->InletsHigh[2];
            Inlets[2] = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            i = 0;
            do {
              Inlets[i] = LineData->InletsHigh[i];
              i++;
            } while (i + 1 <= 3);

            localDW->bitsForTID0.is_InletControl = IN_HysteresisStateHigh;
          }
          break;

         case IN_HysteresisStateLow:
          LineData_tmp = LineData->BreakpointLow.X +
            LineData->BreakpointLow.Hysteresis;
          if (Setpoint > LineData_tmp) {
            localDW->bitsForTID0.is_InletControl = IN_InterpolationState;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->InletsLow[0];
            LineData_1[1] = LineData->InletsHigh[0];
            Inlets[0] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->InletsLow[1];
            LineData_1[1] = LineData->InletsHigh[1];
            Inlets[1] = interp1(LineData_0, LineData_1, Setpoint);
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->InletsLow[2];
            LineData_1[1] = LineData->InletsHigh[2];
            Inlets[2] = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            i = 0;
            do {
              Inlets[i] = LineData->InletsLow[i];
              i++;
            } while (i + 1 <= 3);

            localDW->bitsForTID0.is_InletControl = IN_HysteresisStateLow;
          }
          break;

         default:
          // case IN_InterpolationState:
          if (Setpoint > LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_InletControl = IN_HysteresisStateHigh;
          } else {
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            if (Setpoint < LineData_tmp) {
              localDW->bitsForTID0.is_InletControl = IN_HysteresisStateLow;
            } else {
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->InletsLow[0];
              LineData_1[1] = LineData->InletsHigh[0];
              Inlets[0] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->InletsLow[1];
              LineData_1[1] = LineData->InletsHigh[1];
              Inlets[1] = interp1(LineData_0, LineData_1, Setpoint);
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->InletsLow[2];
              LineData_1[1] = LineData->InletsHigh[2];
              Inlets[2] = interp1(LineData_0, LineData_1, Setpoint);
            }
          }
          break;
        }

        switch (localDW->bitsForTID0.is_PressureControl) {
         case IN_HysteresisStateHigh:
          if (Setpoint < LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_PressureControl = IN_InterpolationState;
            LineData_0[0] = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->PressureLow;
            LineData_1[1] = LineData->PressureHigh;
            *Pressure = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            *Pressure = LineData->PressureHigh;
          }
          break;

         case IN_HysteresisStateLow:
          LineData_tmp = LineData->BreakpointLow.X +
            LineData->BreakpointLow.Hysteresis;
          if (Setpoint > LineData_tmp) {
            localDW->bitsForTID0.is_PressureControl = IN_InterpolationState;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->PressureLow;
            LineData_1[1] = LineData->PressureHigh;
            *Pressure = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            *Pressure = LineData->PressureLow;
          }
          break;

         default:
          // case IN_InterpolationState:
          if (Setpoint > LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_PressureControl = IN_HysteresisStateHigh;
            *Pressure = LineData->PressureHigh;
          } else {
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            if (Setpoint < LineData_tmp) {
              localDW->bitsForTID0.is_PressureControl = IN_HysteresisStateLow;
              *Pressure = LineData->PressureLow;
            } else {
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->PressureLow;
              LineData_1[1] = LineData->PressureHigh;
              *Pressure = interp1(LineData_0, LineData_1, Setpoint);
            }
          }
          break;
        }

        switch (localDW->bitsForTID0.is_CapacityControl) {
         case IN_HysteresisStateHigh:
          if (Setpoint < LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_CapacityControl = IN_InterpolationState;
            LineData_0[0] = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VentilationCapacityLow;
            LineData_1[1] = LineData->VentilationCapacityHigh;
            *VentilationCapacity = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            *VentilationCapacity = LineData->VentilationCapacityHigh;
          }
          break;

         case IN_HysteresisStateLow:
          LineData_tmp = LineData->BreakpointLow.X +
            LineData->BreakpointLow.Hysteresis;
          if (Setpoint > LineData_tmp) {
            localDW->bitsForTID0.is_CapacityControl = IN_InterpolationState;
            LineData_0[0] = LineData_tmp;
            LineData_0[1] = LineData->BreakpointHigh.X;
            LineData_1[0] = LineData->VentilationCapacityLow;
            LineData_1[1] = LineData->VentilationCapacityHigh;
            *VentilationCapacity = interp1(LineData_0, LineData_1, Setpoint);
          } else {
            *VentilationCapacity = LineData->VentilationCapacityLow;
          }
          break;

         default:
          // case IN_InterpolationState:
          if (Setpoint > LineData->BreakpointHigh.X) {
            localDW->bitsForTID0.is_CapacityControl = IN_HysteresisStateHigh;
            *VentilationCapacity = LineData->VentilationCapacityHigh;
          } else {
            LineData_tmp = LineData->BreakpointLow.X +
              LineData->BreakpointLow.Hysteresis;
            if (Setpoint < LineData_tmp) {
              localDW->bitsForTID0.is_CapacityControl = IN_HysteresisStateLow;
              *VentilationCapacity = LineData->VentilationCapacityLow;
            } else {
              LineData_0[0] = LineData_tmp;
              LineData_0[1] = LineData->BreakpointHigh.X;
              LineData_1[0] = LineData->VentilationCapacityLow;
              LineData_1[1] = LineData->VentilationCapacityHigh;
              *VentilationCapacity = interp1(LineData_0, LineData_1, Setpoint);
            }
          }
          break;
        }
      }
      break;

     case IN_ReadyState2:
      break;

     default:
      // case IN_ReadyState3:
      break;
    }
  }

  // Function for Chart: '<S46>/TunnelLine1'
  void FancomVentilationController::TableLine_enter(const LineBus *LineData,
    boolean_T *HighReady, int32_T *ActiveState, real32_T Setpoint, int32_T
    OnOffFans[20], real32_T VariableFans[8], real32_T Inlets[3], real32_T
    *Pressure, real32_T *VentilationCapacity, real32_T *ModulatingPercentage,
    boolean_T *LowReady, real32_T InletsLow[3], real32_T InletsHigh[3], real32_T
    VariableFansLow[8], real32_T VariableFansHigh[8], real32_T ButterflyValves[8],
    DW_TunnelLine1 *localDW)
  {
    int32_T i;
    real32_T LineData_0[2];
    real32_T LineData_1[2];
    real32_T LineData_tmp;

    // Chart: '<S46>/TunnelLine1'
    localDW->bitsForTID0.is_c11_setpointtofanmapping_single_state_lib =
      IN_ActiveState;
    *HighReady = false;
    *LowReady = false;
    *ActiveState = LineData->LineNumber;
    for (i = 0; i < 8; i++) {
      ButterflyValves[i] = LineData->ButterflyValveLow[i];
    }

    localDW->bitsForTID0.is_ModulatingPercentage = IN_InterpolationState;
    LineData_tmp = LineData->BreakpointLow.X +
      LineData->BreakpointLow.Hysteresis;
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->ModulationPercentageLow;
    LineData_1[1] = LineData->ModulationPercentageHigh;
    *ModulatingPercentage = interp1(LineData_0, LineData_1, Setpoint);
    for (i = 0; i < 8; i++) {
      VariableFansLow[i] = LineData->VariableFansLow[i];
      VariableFansHigh[i] = LineData->VariableFansHigh[i];
    }

    localDW->bitsForTID0.is_VariableFanControl = IN_InterpolationState;
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[0];
    LineData_1[1] = LineData->VariableFansHigh[0];
    VariableFans[0] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[1];
    LineData_1[1] = LineData->VariableFansHigh[1];
    VariableFans[1] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[2];
    LineData_1[1] = LineData->VariableFansHigh[2];
    VariableFans[2] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[3];
    LineData_1[1] = LineData->VariableFansHigh[3];
    VariableFans[3] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[4];
    LineData_1[1] = LineData->VariableFansHigh[4];
    VariableFans[4] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[5];
    LineData_1[1] = LineData->VariableFansHigh[5];
    VariableFans[5] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[6];
    LineData_1[1] = LineData->VariableFansHigh[6];
    VariableFans[6] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VariableFansLow[7];
    LineData_1[1] = LineData->VariableFansHigh[7];
    VariableFans[7] = interp1(LineData_0, LineData_1, Setpoint);
    std::memcpy(&OnOffFans[0], &LineData->OnOffFans[0], 20U * sizeof(int32_T));
    InletsLow[0] = LineData->InletsLow[0];
    InletsHigh[0] = LineData->InletsHigh[0];
    InletsLow[1] = LineData->InletsLow[1];
    InletsHigh[1] = LineData->InletsHigh[1];
    InletsLow[2] = LineData->InletsLow[2];
    InletsHigh[2] = LineData->InletsHigh[2];
    localDW->bitsForTID0.is_InletControl = IN_InterpolationState;
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->InletsLow[0];
    LineData_1[1] = LineData->InletsHigh[0];
    Inlets[0] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->InletsLow[1];
    LineData_1[1] = LineData->InletsHigh[1];
    Inlets[1] = interp1(LineData_0, LineData_1, Setpoint);
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->InletsLow[2];
    LineData_1[1] = LineData->InletsHigh[2];
    Inlets[2] = interp1(LineData_0, LineData_1, Setpoint);
    localDW->bitsForTID0.is_PressureControl = IN_InterpolationState;
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->PressureLow;
    LineData_1[1] = LineData->PressureHigh;
    *Pressure = interp1(LineData_0, LineData_1, Setpoint);
    localDW->bitsForTID0.is_CapacityControl = IN_InterpolationState;
    LineData_0[0] = LineData_tmp;
    LineData_0[1] = LineData->BreakpointHigh.X;
    LineData_1[0] = LineData->VentilationCapacityLow;
    LineData_1[1] = LineData->VentilationCapacityHigh;
    *VentilationCapacity = interp1(LineData_0, LineData_1, Setpoint);

    // End of Chart: '<S46>/TunnelLine1'
  }

  // Function for Chart: '<S46>/TunnelLine1'
  void FancomVentilationController::TableLine_exit(DW_TunnelLine1 *localDW)
  {
    exit_internal_ActiveState(localDW);
    localDW->bitsForTID0.is_c11_setpointtofanmapping_single_state_lib =
      IN_NO_ACTIVE_CHILD;
  }

  // Function for Chart: '<S46>/TunnelLine1'
  void FancomVentilationController::TableLine_init(DW_TunnelLine1 *localDW)
  {
    localDW->bitsForTID0.is_CapacityControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_InletControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_ModulatingPercentage = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_PressureControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_VariableFanControl = IN_NO_ACTIVE_CHILD;
    localDW->bitsForTID0.is_c11_setpointtofanmapping_single_state_lib =
      IN_NO_ACTIVE_CHILD;
  }
}

namespace NS_FANCOM
{
  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::ErrorHigh(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
         localDW->LineData1.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    } else {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_ErrorHigh;
      *rty_MainState = -1;
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::ErrorLow(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint <
         localDW->LineData32.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    } else {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_ErrorLow;
      *rty_MainState = -2;
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine1_m(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady1) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine1);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady1) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine1);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData1, &localDW->LineHighReady1,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady1,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine1);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine1);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine10(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady10) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine10);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady10) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine10);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData10, &localDW->LineHighReady10,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady10,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine10);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine10);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine11(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady11) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine11);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady11) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine11);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData11, &localDW->LineHighReady11,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady11,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine11);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine11);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine12(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady12) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine12);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady12) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine12);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData12, &localDW->LineHighReady12,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady12,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine12);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine12);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine13(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady13) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine13);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady13) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine13);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData13, &localDW->LineHighReady13,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady13,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine13);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine13);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine14(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady14) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine14);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady14) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine14);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData14, &localDW->LineHighReady14,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady14,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine14);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine14);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine15(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady15) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine15);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady15) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine15);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData15, &localDW->LineHighReady15,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady15,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine15);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine15);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine16(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady16) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine16);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady16) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine16);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData16, &localDW->LineLowReady16,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineHighReady16,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine16);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine16);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine17(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady17) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine17);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady17) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine17);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData17, &localDW->LineHighReady17,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady17,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine17);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine17);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine18(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady18) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine18);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady18) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine18);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData18, &localDW->LineHighReady18,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady18,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine18);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine18);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine19(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady19) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine19);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady19) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine19);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData19, &localDW->LineHighReady19,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady19,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine19);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine19);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine2(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady2) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine2);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady2) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine2);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData2, &localDW->LineHighReady2,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady2,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine2);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine2);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine20(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady20) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine20);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady20) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine20);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData20, &localDW->LineHighReady20,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady20,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine20);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine20);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine21(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady21) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine21);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady21) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine21);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData21, &localDW->LineHighReady21,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady21,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine21);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine21);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine22(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady22) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine22);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady22) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine22);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData22, &localDW->LineHighReady22,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady22,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine22);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine22);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine23(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady23) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine23);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady23) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine23);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData23, &localDW->LineHighReady23,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady23,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine23);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine23);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine24(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady24) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine24);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady24) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine24);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData24, &localDW->LineLowReady24,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineHighReady24,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine24);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine24);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine25(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady25) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine25);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady25) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine25);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData25, &localDW->LineHighReady25,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady25,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine25);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine25);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine26(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady26) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine26);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady26) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine26);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData26, &localDW->LineHighReady26,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady26,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine26);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine26);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine27(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady27) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine27);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady27) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine27);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData27, &localDW->LineHighReady27,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady27,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine27);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine27);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine28(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady28) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine28);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady28) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine28);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData28, &localDW->LineHighReady28,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady28,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine28);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine28);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine29(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady29) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine29);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady29) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine29);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData29, &localDW->LineHighReady29,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady29,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine29);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine29);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine3(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady3) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine3);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady3) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine3);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData3, &localDW->LineHighReady3,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady3,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine3);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine3);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine30(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady30) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine30);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady30) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine30);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData30, &localDW->LineHighReady30,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady30,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine30);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine30);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine31(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady31) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine31);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady31) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine31);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData31, &localDW->LineHighReady31,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady31,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine31);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine31);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine32(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady32) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine32);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady32) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine32);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData32, &localDW->LineLowReady32,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineHighReady32,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine32);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine32);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine4(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady4) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine4);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady4) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine4);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData4, &localDW->LineHighReady4,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady4,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine4);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine4);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine5(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady5) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine5);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady5) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine5);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData5, &localDW->LineHighReady5,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady5,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine5);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine5);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine6(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady6) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine6);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady6) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine6);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData6, &localDW->LineHighReady6,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady6,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine6);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine6);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine7(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady7) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine7);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady7) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine7);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData7, &localDW->LineHighReady7,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady7,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine7);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine7);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine8(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady8) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine8);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady8) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine8);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData8, &localDW->LineLowReady8,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineHighReady8,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine8);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine8);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::
    enter_internal_c5_setpointtofanmapping_stateflow_lib(real32_T rtu_Setpoint,
    int32_T rtu_MaxLineAllowed, const ConfBus *rtu_Conf, int32_T *rty_MainState,
    int32_T rty_OnOffFans[20], real32_T rty_VariableFans[8], real32_T
    rty_ButterflyValves[8], real32_T rty_Inlets[3], real32_T *rty_Pressure,
    real32_T *rty_VentilationCapacity, real32_T *rty_ModulatingPercentage,
    real32_T rty_InletsLow[3], real32_T rty_InletsHigh[3], real32_T
    rty_VariableFansLow[8], real32_T rty_VariableFansHigh[8],
    DW_MTSetpointToFanMapping *localDW)
  {
    // Chart: '<S2>/MTSetpointToFanMapping'
    localDW->LineData1 = rtu_Conf->Line1;
    localDW->LineData2 = rtu_Conf->Line2;
    localDW->LineData3 = rtu_Conf->Line3;
    localDW->LineData4 = rtu_Conf->Line4;
    localDW->LineData5 = rtu_Conf->Line5;
    localDW->LineData6 = rtu_Conf->Line6;
    localDW->LineData7 = rtu_Conf->Line7;
    localDW->LineData8 = rtu_Conf->Line8;
    localDW->LineData9 = rtu_Conf->Line9;
    localDW->LineData10 = rtu_Conf->Line10;
    localDW->LineData11 = rtu_Conf->Line11;
    localDW->LineData12 = rtu_Conf->Line12;
    localDW->LineData13 = rtu_Conf->Line13;
    localDW->LineData14 = rtu_Conf->Line14;
    localDW->LineData15 = rtu_Conf->Line15;
    localDW->LineData16 = rtu_Conf->Line16;
    localDW->LineData17 = rtu_Conf->Line17;
    localDW->LineData18 = rtu_Conf->Line18;
    localDW->LineData19 = rtu_Conf->Line19;
    localDW->LineData20 = rtu_Conf->Line20;
    localDW->LineData21 = rtu_Conf->Line21;
    localDW->LineData22 = rtu_Conf->Line22;
    localDW->LineData23 = rtu_Conf->Line23;
    localDW->LineData24 = rtu_Conf->Line24;
    localDW->LineData25 = rtu_Conf->Line25;
    localDW->LineData26 = rtu_Conf->Line26;
    localDW->LineData27 = rtu_Conf->Line27;
    localDW->LineData28 = rtu_Conf->Line28;
    localDW->LineData29 = rtu_Conf->Line29;
    localDW->LineData30 = rtu_Conf->Line30;
    localDW->LineData31 = rtu_Conf->Line31;
    localDW->LineData32 = rtu_Conf->Line32;
    if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
         localDW->LineData1.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
               (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    } else {
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_ErrorHigh;
      *rty_MainState = -1;
    }

    // End of Chart: '<S2>/MTSetpointToFanMapping'
  }

  // Function for Chart: '<S2>/MTSetpointToFanMapping'
  void FancomVentilationController::TunnelLine9(real32_T rtu_Setpoint, int32_T
    rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T rty_OnOffFans[20],
    real32_T rty_VariableFans[8], real32_T rty_ButterflyValves[8], real32_T
    rty_Inlets[3], real32_T *rty_Pressure, real32_T *rty_VentilationCapacity,
    real32_T *rty_ModulatingPercentage, real32_T rty_InletsLow[3], real32_T
    rty_InletsHigh[3], real32_T rty_VariableFansLow[8], real32_T
    rty_VariableFansHigh[8], DW_MTSetpointToFanMapping *localDW)
  {
    boolean_T guard1 = false;
    boolean_T guard10 = false;
    boolean_T guard11 = false;
    boolean_T guard12 = false;
    boolean_T guard13 = false;
    boolean_T guard14 = false;
    boolean_T guard15 = false;
    boolean_T guard16 = false;
    boolean_T guard17 = false;
    boolean_T guard18 = false;
    boolean_T guard19 = false;
    boolean_T guard2 = false;
    boolean_T guard20 = false;
    boolean_T guard21 = false;
    boolean_T guard22 = false;
    boolean_T guard23 = false;
    boolean_T guard24 = false;
    boolean_T guard25 = false;
    boolean_T guard26 = false;
    boolean_T guard27 = false;
    boolean_T guard28 = false;
    boolean_T guard29 = false;
    boolean_T guard3 = false;
    boolean_T guard30 = false;
    boolean_T guard31 = false;
    boolean_T guard32 = false;
    boolean_T guard4 = false;
    boolean_T guard5 = false;
    boolean_T guard6 = false;
    boolean_T guard7 = false;
    boolean_T guard8 = false;
    boolean_T guard9 = false;
    guard1 = false;
    guard2 = false;
    guard3 = false;
    guard4 = false;
    guard5 = false;
    guard6 = false;
    guard7 = false;
    guard8 = false;
    guard9 = false;
    guard10 = false;
    guard11 = false;
    guard12 = false;
    guard13 = false;
    guard14 = false;
    guard15 = false;
    guard16 = false;
    guard17 = false;
    guard18 = false;
    guard19 = false;
    guard20 = false;
    guard21 = false;
    guard22 = false;
    guard23 = false;
    guard24 = false;
    guard25 = false;
    guard26 = false;
    guard27 = false;
    guard28 = false;
    guard29 = false;
    guard30 = false;
    guard31 = false;
    guard32 = false;
    if (localDW->LineHighReady9) {
      if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) && (rtu_Setpoint <
           localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine9);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorHigh;
        *rty_MainState = -1;
      }
    } else if (localDW->LineLowReady9) {
      if ((rtu_Setpoint >= localDW->LineData32.BreakpointLow.X) && (rtu_Setpoint
           < localDW->LineData32.BreakpointHigh.X)) {
        guard32 = true;
      } else if ((rtu_Setpoint >= localDW->LineData31.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData31.BreakpointHigh.X)) {
        guard31 = true;
      } else if ((rtu_Setpoint >= localDW->LineData30.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData30.BreakpointHigh.X)) {
        guard30 = true;
      } else if ((rtu_Setpoint >= localDW->LineData29.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData29.BreakpointHigh.X)) {
        guard29 = true;
      } else if ((rtu_Setpoint >= localDW->LineData28.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData28.BreakpointHigh.X)) {
        guard28 = true;
      } else if ((rtu_Setpoint >= localDW->LineData27.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData27.BreakpointHigh.X)) {
        guard27 = true;
      } else if ((rtu_Setpoint >= localDW->LineData26.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData26.BreakpointHigh.X)) {
        guard26 = true;
      } else if ((rtu_Setpoint >= localDW->LineData25.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData25.BreakpointHigh.X)) {
        guard25 = true;
      } else if ((rtu_Setpoint >= localDW->LineData24.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData24.BreakpointHigh.X)) {
        guard24 = true;
      } else if ((rtu_Setpoint >= localDW->LineData23.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData23.BreakpointHigh.X)) {
        guard23 = true;
      } else if ((rtu_Setpoint >= localDW->LineData22.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData22.BreakpointHigh.X)) {
        guard22 = true;
      } else if ((rtu_Setpoint >= localDW->LineData21.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData21.BreakpointHigh.X)) {
        guard21 = true;
      } else if ((rtu_Setpoint >= localDW->LineData20.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData20.BreakpointHigh.X)) {
        guard20 = true;
      } else if ((rtu_Setpoint >= localDW->LineData19.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData19.BreakpointHigh.X)) {
        guard19 = true;
      } else if ((rtu_Setpoint >= localDW->LineData18.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData18.BreakpointHigh.X)) {
        guard18 = true;
      } else if ((rtu_Setpoint >= localDW->LineData17.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData17.BreakpointHigh.X)) {
        guard17 = true;
      } else if ((rtu_Setpoint >= localDW->LineData16.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData16.BreakpointHigh.X)) {
        guard16 = true;
      } else if ((rtu_Setpoint >= localDW->LineData15.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData15.BreakpointHigh.X)) {
        guard15 = true;
      } else if ((rtu_Setpoint >= localDW->LineData14.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData14.BreakpointHigh.X)) {
        guard14 = true;
      } else if ((rtu_Setpoint >= localDW->LineData13.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData13.BreakpointHigh.X)) {
        guard13 = true;
      } else if ((rtu_Setpoint >= localDW->LineData12.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData12.BreakpointHigh.X)) {
        guard12 = true;
      } else if ((rtu_Setpoint >= localDW->LineData11.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData11.BreakpointHigh.X)) {
        guard11 = true;
      } else if ((rtu_Setpoint >= localDW->LineData10.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData10.BreakpointHigh.X)) {
        guard10 = true;
      } else if ((rtu_Setpoint >= localDW->LineData9.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData9.BreakpointHigh.X)) {
        guard9 = true;
      } else if ((rtu_Setpoint >= localDW->LineData8.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData8.BreakpointHigh.X)) {
        guard8 = true;
      } else if ((rtu_Setpoint >= localDW->LineData7.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData7.BreakpointHigh.X)) {
        guard7 = true;
      } else if ((rtu_Setpoint >= localDW->LineData6.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData6.BreakpointHigh.X)) {
        guard6 = true;
      } else if ((rtu_Setpoint >= localDW->LineData5.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData5.BreakpointHigh.X)) {
        guard5 = true;
      } else if ((rtu_Setpoint >= localDW->LineData4.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData4.BreakpointHigh.X)) {
        guard4 = true;
      } else if ((rtu_Setpoint >= localDW->LineData3.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData3.BreakpointHigh.X)) {
        guard3 = true;
      } else if ((rtu_Setpoint >= localDW->LineData2.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData2.BreakpointHigh.X)) {
        guard2 = true;
      } else if ((rtu_Setpoint >= localDW->LineData1.BreakpointLow.X) &&
                 (rtu_Setpoint < localDW->LineData1.BreakpointHigh.X)) {
        guard1 = true;
      } else {
        TableLine_exit(&localDW->sf_TunnelLine9);
        localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
          IN_ErrorLow;
        *rty_MainState = -2;
      }
    } else {
      TableLine_during(&localDW->LineData9, &localDW->LineHighReady9,
                       rtu_Setpoint, rty_OnOffFans, rty_VariableFans, rty_Inlets,
                       rty_Pressure, rty_VentilationCapacity,
                       rty_ModulatingPercentage, &localDW->LineLowReady9,
                       rtu_MaxLineAllowed, rty_InletsLow, rty_InletsHigh,
                       rty_VariableFansLow, rty_VariableFansHigh,
                       &localDW->sf_TunnelLine9);
    }

    if (guard32) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine32;
      TableLine_enter(&localDW->LineData32, &localDW->LineLowReady32,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady32, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine32);
    }

    if (guard31) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine31;
      TableLine_enter(&localDW->LineData31, &localDW->LineHighReady31,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady31, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine31);
    }

    if (guard30) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine30;
      TableLine_enter(&localDW->LineData30, &localDW->LineHighReady30,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady30, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine30);
    }

    if (guard29) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine29;
      TableLine_enter(&localDW->LineData29, &localDW->LineHighReady29,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady29, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine29);
    }

    if (guard28) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine28;
      TableLine_enter(&localDW->LineData28, &localDW->LineHighReady28,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady28, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine28);
    }

    if (guard27) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine27;
      TableLine_enter(&localDW->LineData27, &localDW->LineHighReady27,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady27, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine27);
    }

    if (guard26) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine26;
      TableLine_enter(&localDW->LineData26, &localDW->LineHighReady26,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady26, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine26);
    }

    if (guard25) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine25;
      TableLine_enter(&localDW->LineData25, &localDW->LineHighReady25,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady25, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine25);
    }

    if (guard24) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine24;
      TableLine_enter(&localDW->LineData24, &localDW->LineLowReady24,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady24, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine24);
    }

    if (guard23) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine23;
      TableLine_enter(&localDW->LineData23, &localDW->LineHighReady23,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady23, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine23);
    }

    if (guard22) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine22;
      TableLine_enter(&localDW->LineData22, &localDW->LineHighReady22,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady22, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine22);
    }

    if (guard21) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine21;
      TableLine_enter(&localDW->LineData21, &localDW->LineHighReady21,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady21, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine21);
    }

    if (guard20) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine20;
      TableLine_enter(&localDW->LineData20, &localDW->LineHighReady20,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady20, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine20);
    }

    if (guard19) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine19;
      TableLine_enter(&localDW->LineData19, &localDW->LineHighReady19,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady19, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine19);
    }

    if (guard18) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine18;
      TableLine_enter(&localDW->LineData18, &localDW->LineHighReady18,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady18, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine18);
    }

    if (guard17) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine17;
      TableLine_enter(&localDW->LineData17, &localDW->LineHighReady17,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady17, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine17);
    }

    if (guard16) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine16;
      TableLine_enter(&localDW->LineData16, &localDW->LineLowReady16,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady16, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine16);
    }

    if (guard15) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine15;
      TableLine_enter(&localDW->LineData15, &localDW->LineHighReady15,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady15, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine15);
    }

    if (guard14) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine14;
      TableLine_enter(&localDW->LineData14, &localDW->LineHighReady14,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady14, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine14);
    }

    if (guard13) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine13;
      TableLine_enter(&localDW->LineData13, &localDW->LineHighReady13,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady13, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine13);
    }

    if (guard12) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine12;
      TableLine_enter(&localDW->LineData12, &localDW->LineHighReady12,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady12, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine12);
    }

    if (guard11) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine11;
      TableLine_enter(&localDW->LineData11, &localDW->LineHighReady11,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady11, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine11);
    }

    if (guard10) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine10;
      TableLine_enter(&localDW->LineData10, &localDW->LineHighReady10,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady10, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine10);
    }

    if (guard9) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine9;
      TableLine_enter(&localDW->LineData9, &localDW->LineHighReady9,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady9, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine9);
    }

    if (guard8) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine8;
      TableLine_enter(&localDW->LineData8, &localDW->LineLowReady8,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineHighReady8, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine8);
    }

    if (guard7) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine7;
      TableLine_enter(&localDW->LineData7, &localDW->LineHighReady7,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady7, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine7);
    }

    if (guard6) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine6;
      TableLine_enter(&localDW->LineData6, &localDW->LineHighReady6,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady6, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine6);
    }

    if (guard5) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine5;
      TableLine_enter(&localDW->LineData5, &localDW->LineHighReady5,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady5, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine5);
    }

    if (guard4) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine4;
      TableLine_enter(&localDW->LineData4, &localDW->LineHighReady4,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady4, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine4);
    }

    if (guard3) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine3;
      TableLine_enter(&localDW->LineData3, &localDW->LineHighReady3,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady3, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine3);
    }

    if (guard2) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine2;
      TableLine_enter(&localDW->LineData2, &localDW->LineHighReady2,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady2, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine2);
    }

    if (guard1) {
      TableLine_exit(&localDW->sf_TunnelLine9);
      localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib =
        IN_TunnelLine1;
      TableLine_enter(&localDW->LineData1, &localDW->LineHighReady1,
                      rty_MainState, rtu_Setpoint, rty_OnOffFans,
                      rty_VariableFans, rty_Inlets, rty_Pressure,
                      rty_VentilationCapacity, rty_ModulatingPercentage,
                      &localDW->LineLowReady1, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh,
                      rty_ButterflyValves, &localDW->sf_TunnelLine1);
    }
  }
}

namespace NS_FANCOM
{
  //
  // System initialize for atomic system:
  //    '<S2>/MTSetpointToFanMapping'
  //    '<S2>/TunnelSetpointToFanMapping'
  //
  void FancomVentilationController::MTSetpointToFanMapping_Init(real32_T
    rtu_Setpoint, int32_T rtu_MaxLineAllowed, int32_T *rty_MainState, int32_T
    rty_OnOffFans[20], real32_T rty_VariableFans[8], real32_T
    rty_ButterflyValves[8], real32_T rty_Inlets[3], real32_T *rty_Pressure,
    real32_T *rty_VentilationCapacity, real32_T *rty_ModulatingPercentage,
    real32_T rty_InletsLow[3], real32_T rty_InletsHigh[3], real32_T
    rty_VariableFansLow[8], real32_T rty_VariableFansHigh[8],
    DW_MTSetpointToFanMapping *localDW)
  {
    int32_T i;
    TableLine_init(&localDW->sf_TunnelLine1);
    TableLine_init(&localDW->sf_TunnelLine2);
    TableLine_init(&localDW->sf_TunnelLine3);
    TableLine_init(&localDW->sf_TunnelLine4);
    TableLine_init(&localDW->sf_TunnelLine5);
    TableLine_init(&localDW->sf_TunnelLine6);
    TableLine_init(&localDW->sf_TunnelLine7);
    TableLine_init(&localDW->sf_TunnelLine8);
    TableLine_init(&localDW->sf_TunnelLine9);
    TableLine_init(&localDW->sf_TunnelLine10);
    TableLine_init(&localDW->sf_TunnelLine11);
    TableLine_init(&localDW->sf_TunnelLine12);
    TableLine_init(&localDW->sf_TunnelLine13);
    TableLine_init(&localDW->sf_TunnelLine14);
    TableLine_init(&localDW->sf_TunnelLine15);
    TableLine_init(&localDW->sf_TunnelLine16);
    TableLine_init(&localDW->sf_TunnelLine17);
    TableLine_init(&localDW->sf_TunnelLine18);
    TableLine_init(&localDW->sf_TunnelLine19);
    TableLine_init(&localDW->sf_TunnelLine20);
    TableLine_init(&localDW->sf_TunnelLine21);
    TableLine_init(&localDW->sf_TunnelLine22);
    TableLine_init(&localDW->sf_TunnelLine23);
    TableLine_init(&localDW->sf_TunnelLine24);
    TableLine_init(&localDW->sf_TunnelLine25);
    TableLine_init(&localDW->sf_TunnelLine26);
    TableLine_init(&localDW->sf_TunnelLine27);
    TableLine_init(&localDW->sf_TunnelLine28);
    TableLine_init(&localDW->sf_TunnelLine29);
    TableLine_init(&localDW->sf_TunnelLine30);
    TableLine_init(&localDW->sf_TunnelLine31);
    TableLine_init(&localDW->sf_TunnelLine32);
    localDW->LineData1.BreakpointLow.X = 0.0F;
    localDW->LineData1.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData1.InletsLow[0] = 0.0F;
    localDW->LineData1.InletsLow[1] = 0.0F;
    localDW->LineData1.InletsLow[2] = 0.0F;
    localDW->LineData1.PressureLow = 0.0F;
    localDW->LineData1.VentilationCapacityLow = 0.0F;
    localDW->LineData1.ModulationPercentageLow = 0.0F;
    localDW->LineData1.BreakpointHigh.X = 0.0F;
    localDW->LineData1.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData1.InletsHigh[0] = 0.0F;
    localDW->LineData1.InletsHigh[1] = 0.0F;
    localDW->LineData1.InletsHigh[2] = 0.0F;
    localDW->LineData1.PressureHigh = 0.0F;
    localDW->LineData1.VentilationCapacityHigh = 0.0F;
    localDW->LineData1.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData1.VariableFansLow[i] = 0.0F;
      localDW->LineData1.ButterflyValveLow[i] = 0.0F;
      localDW->LineData1.VariableFansHigh[i] = 0.0F;
      localDW->LineData1.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData1.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData1.OnSequenceDelay = 0;
    localDW->LineData1.LineNumber = 0;
    localDW->LineData2.BreakpointLow.X = 0.0F;
    localDW->LineData2.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData2.InletsLow[0] = 0.0F;
    localDW->LineData2.InletsLow[1] = 0.0F;
    localDW->LineData2.InletsLow[2] = 0.0F;
    localDW->LineData2.PressureLow = 0.0F;
    localDW->LineData2.VentilationCapacityLow = 0.0F;
    localDW->LineData2.ModulationPercentageLow = 0.0F;
    localDW->LineData2.BreakpointHigh.X = 0.0F;
    localDW->LineData2.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData2.InletsHigh[0] = 0.0F;
    localDW->LineData2.InletsHigh[1] = 0.0F;
    localDW->LineData2.InletsHigh[2] = 0.0F;
    localDW->LineData2.PressureHigh = 0.0F;
    localDW->LineData2.VentilationCapacityHigh = 0.0F;
    localDW->LineData2.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData2.VariableFansLow[i] = 0.0F;
      localDW->LineData2.ButterflyValveLow[i] = 0.0F;
      localDW->LineData2.VariableFansHigh[i] = 0.0F;
      localDW->LineData2.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData2.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData2.OnSequenceDelay = 0;
    localDW->LineData2.LineNumber = 0;
    localDW->LineData3.BreakpointLow.X = 0.0F;
    localDW->LineData3.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData3.InletsLow[0] = 0.0F;
    localDW->LineData3.InletsLow[1] = 0.0F;
    localDW->LineData3.InletsLow[2] = 0.0F;
    localDW->LineData3.PressureLow = 0.0F;
    localDW->LineData3.VentilationCapacityLow = 0.0F;
    localDW->LineData3.ModulationPercentageLow = 0.0F;
    localDW->LineData3.BreakpointHigh.X = 0.0F;
    localDW->LineData3.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData3.InletsHigh[0] = 0.0F;
    localDW->LineData3.InletsHigh[1] = 0.0F;
    localDW->LineData3.InletsHigh[2] = 0.0F;
    localDW->LineData3.PressureHigh = 0.0F;
    localDW->LineData3.VentilationCapacityHigh = 0.0F;
    localDW->LineData3.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData3.VariableFansLow[i] = 0.0F;
      localDW->LineData3.ButterflyValveLow[i] = 0.0F;
      localDW->LineData3.VariableFansHigh[i] = 0.0F;
      localDW->LineData3.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData3.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData3.OnSequenceDelay = 0;
    localDW->LineData3.LineNumber = 0;
    localDW->LineData4.BreakpointLow.X = 0.0F;
    localDW->LineData4.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData4.InletsLow[0] = 0.0F;
    localDW->LineData4.InletsLow[1] = 0.0F;
    localDW->LineData4.InletsLow[2] = 0.0F;
    localDW->LineData4.PressureLow = 0.0F;
    localDW->LineData4.VentilationCapacityLow = 0.0F;
    localDW->LineData4.ModulationPercentageLow = 0.0F;
    localDW->LineData4.BreakpointHigh.X = 0.0F;
    localDW->LineData4.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData4.InletsHigh[0] = 0.0F;
    localDW->LineData4.InletsHigh[1] = 0.0F;
    localDW->LineData4.InletsHigh[2] = 0.0F;
    localDW->LineData4.PressureHigh = 0.0F;
    localDW->LineData4.VentilationCapacityHigh = 0.0F;
    localDW->LineData4.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData4.VariableFansLow[i] = 0.0F;
      localDW->LineData4.ButterflyValveLow[i] = 0.0F;
      localDW->LineData4.VariableFansHigh[i] = 0.0F;
      localDW->LineData4.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData4.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData4.OnSequenceDelay = 0;
    localDW->LineData4.LineNumber = 0;
    localDW->LineData5.BreakpointLow.X = 0.0F;
    localDW->LineData5.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData5.InletsLow[0] = 0.0F;
    localDW->LineData5.InletsLow[1] = 0.0F;
    localDW->LineData5.InletsLow[2] = 0.0F;
    localDW->LineData5.PressureLow = 0.0F;
    localDW->LineData5.VentilationCapacityLow = 0.0F;
    localDW->LineData5.ModulationPercentageLow = 0.0F;
    localDW->LineData5.BreakpointHigh.X = 0.0F;
    localDW->LineData5.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData5.InletsHigh[0] = 0.0F;
    localDW->LineData5.InletsHigh[1] = 0.0F;
    localDW->LineData5.InletsHigh[2] = 0.0F;
    localDW->LineData5.PressureHigh = 0.0F;
    localDW->LineData5.VentilationCapacityHigh = 0.0F;
    localDW->LineData5.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData5.VariableFansLow[i] = 0.0F;
      localDW->LineData5.ButterflyValveLow[i] = 0.0F;
      localDW->LineData5.VariableFansHigh[i] = 0.0F;
      localDW->LineData5.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData5.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData5.OnSequenceDelay = 0;
    localDW->LineData5.LineNumber = 0;
    localDW->LineData6.BreakpointLow.X = 0.0F;
    localDW->LineData6.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData6.InletsLow[0] = 0.0F;
    localDW->LineData6.InletsLow[1] = 0.0F;
    localDW->LineData6.InletsLow[2] = 0.0F;
    localDW->LineData6.PressureLow = 0.0F;
    localDW->LineData6.VentilationCapacityLow = 0.0F;
    localDW->LineData6.ModulationPercentageLow = 0.0F;
    localDW->LineData6.BreakpointHigh.X = 0.0F;
    localDW->LineData6.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData6.InletsHigh[0] = 0.0F;
    localDW->LineData6.InletsHigh[1] = 0.0F;
    localDW->LineData6.InletsHigh[2] = 0.0F;
    localDW->LineData6.PressureHigh = 0.0F;
    localDW->LineData6.VentilationCapacityHigh = 0.0F;
    localDW->LineData6.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData6.VariableFansLow[i] = 0.0F;
      localDW->LineData6.ButterflyValveLow[i] = 0.0F;
      localDW->LineData6.VariableFansHigh[i] = 0.0F;
      localDW->LineData6.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData6.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData6.OnSequenceDelay = 0;
    localDW->LineData6.LineNumber = 0;
    localDW->LineData7.BreakpointLow.X = 0.0F;
    localDW->LineData7.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData7.InletsLow[0] = 0.0F;
    localDW->LineData7.InletsLow[1] = 0.0F;
    localDW->LineData7.InletsLow[2] = 0.0F;
    localDW->LineData7.PressureLow = 0.0F;
    localDW->LineData7.VentilationCapacityLow = 0.0F;
    localDW->LineData7.ModulationPercentageLow = 0.0F;
    localDW->LineData7.BreakpointHigh.X = 0.0F;
    localDW->LineData7.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData7.InletsHigh[0] = 0.0F;
    localDW->LineData7.InletsHigh[1] = 0.0F;
    localDW->LineData7.InletsHigh[2] = 0.0F;
    localDW->LineData7.PressureHigh = 0.0F;
    localDW->LineData7.VentilationCapacityHigh = 0.0F;
    localDW->LineData7.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData7.VariableFansLow[i] = 0.0F;
      localDW->LineData7.ButterflyValveLow[i] = 0.0F;
      localDW->LineData7.VariableFansHigh[i] = 0.0F;
      localDW->LineData7.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData7.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData7.OnSequenceDelay = 0;
    localDW->LineData7.LineNumber = 0;
    localDW->LineData8.BreakpointLow.X = 0.0F;
    localDW->LineData8.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData8.InletsLow[0] = 0.0F;
    localDW->LineData8.InletsLow[1] = 0.0F;
    localDW->LineData8.InletsLow[2] = 0.0F;
    localDW->LineData8.PressureLow = 0.0F;
    localDW->LineData8.VentilationCapacityLow = 0.0F;
    localDW->LineData8.ModulationPercentageLow = 0.0F;
    localDW->LineData8.BreakpointHigh.X = 0.0F;
    localDW->LineData8.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData8.InletsHigh[0] = 0.0F;
    localDW->LineData8.InletsHigh[1] = 0.0F;
    localDW->LineData8.InletsHigh[2] = 0.0F;
    localDW->LineData8.PressureHigh = 0.0F;
    localDW->LineData8.VentilationCapacityHigh = 0.0F;
    localDW->LineData8.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData8.VariableFansLow[i] = 0.0F;
      localDW->LineData8.ButterflyValveLow[i] = 0.0F;
      localDW->LineData8.VariableFansHigh[i] = 0.0F;
      localDW->LineData8.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData8.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData8.OnSequenceDelay = 0;
    localDW->LineData8.LineNumber = 0;
    localDW->LineData19.BreakpointLow.X = 0.0F;
    localDW->LineData19.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData19.InletsLow[0] = 0.0F;
    localDW->LineData19.InletsLow[1] = 0.0F;
    localDW->LineData19.InletsLow[2] = 0.0F;
    localDW->LineData19.PressureLow = 0.0F;
    localDW->LineData19.VentilationCapacityLow = 0.0F;
    localDW->LineData19.ModulationPercentageLow = 0.0F;
    localDW->LineData19.BreakpointHigh.X = 0.0F;
    localDW->LineData19.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData19.InletsHigh[0] = 0.0F;
    localDW->LineData19.InletsHigh[1] = 0.0F;
    localDW->LineData19.InletsHigh[2] = 0.0F;
    localDW->LineData19.PressureHigh = 0.0F;
    localDW->LineData19.VentilationCapacityHigh = 0.0F;
    localDW->LineData19.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData19.VariableFansLow[i] = 0.0F;
      localDW->LineData19.ButterflyValveLow[i] = 0.0F;
      localDW->LineData19.VariableFansHigh[i] = 0.0F;
      localDW->LineData19.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData19.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData19.OnSequenceDelay = 0;
    localDW->LineData19.LineNumber = 0;
    localDW->LineData32.BreakpointLow.X = 0.0F;
    localDW->LineData32.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData32.InletsLow[0] = 0.0F;
    localDW->LineData32.InletsLow[1] = 0.0F;
    localDW->LineData32.InletsLow[2] = 0.0F;
    localDW->LineData32.PressureLow = 0.0F;
    localDW->LineData32.VentilationCapacityLow = 0.0F;
    localDW->LineData32.ModulationPercentageLow = 0.0F;
    localDW->LineData32.BreakpointHigh.X = 0.0F;
    localDW->LineData32.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData32.InletsHigh[0] = 0.0F;
    localDW->LineData32.InletsHigh[1] = 0.0F;
    localDW->LineData32.InletsHigh[2] = 0.0F;
    localDW->LineData32.PressureHigh = 0.0F;
    localDW->LineData32.VentilationCapacityHigh = 0.0F;
    localDW->LineData32.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData32.VariableFansLow[i] = 0.0F;
      localDW->LineData32.ButterflyValveLow[i] = 0.0F;
      localDW->LineData32.VariableFansHigh[i] = 0.0F;
      localDW->LineData32.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData32.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData32.OnSequenceDelay = 0;
    localDW->LineData32.LineNumber = 0;
    localDW->LineData21.BreakpointLow.X = 0.0F;
    localDW->LineData21.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData21.InletsLow[0] = 0.0F;
    localDW->LineData21.InletsLow[1] = 0.0F;
    localDW->LineData21.InletsLow[2] = 0.0F;
    localDW->LineData21.PressureLow = 0.0F;
    localDW->LineData21.VentilationCapacityLow = 0.0F;
    localDW->LineData21.ModulationPercentageLow = 0.0F;
    localDW->LineData21.BreakpointHigh.X = 0.0F;
    localDW->LineData21.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData21.InletsHigh[0] = 0.0F;
    localDW->LineData21.InletsHigh[1] = 0.0F;
    localDW->LineData21.InletsHigh[2] = 0.0F;
    localDW->LineData21.PressureHigh = 0.0F;
    localDW->LineData21.VentilationCapacityHigh = 0.0F;
    localDW->LineData21.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData21.VariableFansLow[i] = 0.0F;
      localDW->LineData21.ButterflyValveLow[i] = 0.0F;
      localDW->LineData21.VariableFansHigh[i] = 0.0F;
      localDW->LineData21.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData21.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData21.OnSequenceDelay = 0;
    localDW->LineData21.LineNumber = 0;
    localDW->LineData22.BreakpointLow.X = 0.0F;
    localDW->LineData22.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData22.InletsLow[0] = 0.0F;
    localDW->LineData22.InletsLow[1] = 0.0F;
    localDW->LineData22.InletsLow[2] = 0.0F;
    localDW->LineData22.PressureLow = 0.0F;
    localDW->LineData22.VentilationCapacityLow = 0.0F;
    localDW->LineData22.ModulationPercentageLow = 0.0F;
    localDW->LineData22.BreakpointHigh.X = 0.0F;
    localDW->LineData22.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData22.InletsHigh[0] = 0.0F;
    localDW->LineData22.InletsHigh[1] = 0.0F;
    localDW->LineData22.InletsHigh[2] = 0.0F;
    localDW->LineData22.PressureHigh = 0.0F;
    localDW->LineData22.VentilationCapacityHigh = 0.0F;
    localDW->LineData22.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData22.VariableFansLow[i] = 0.0F;
      localDW->LineData22.ButterflyValveLow[i] = 0.0F;
      localDW->LineData22.VariableFansHigh[i] = 0.0F;
      localDW->LineData22.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData22.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData22.OnSequenceDelay = 0;
    localDW->LineData22.LineNumber = 0;
    localDW->LineData25.BreakpointLow.X = 0.0F;
    localDW->LineData25.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData25.InletsLow[0] = 0.0F;
    localDW->LineData25.InletsLow[1] = 0.0F;
    localDW->LineData25.InletsLow[2] = 0.0F;
    localDW->LineData25.PressureLow = 0.0F;
    localDW->LineData25.VentilationCapacityLow = 0.0F;
    localDW->LineData25.ModulationPercentageLow = 0.0F;
    localDW->LineData25.BreakpointHigh.X = 0.0F;
    localDW->LineData25.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData25.InletsHigh[0] = 0.0F;
    localDW->LineData25.InletsHigh[1] = 0.0F;
    localDW->LineData25.InletsHigh[2] = 0.0F;
    localDW->LineData25.PressureHigh = 0.0F;
    localDW->LineData25.VentilationCapacityHigh = 0.0F;
    localDW->LineData25.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData25.VariableFansLow[i] = 0.0F;
      localDW->LineData25.ButterflyValveLow[i] = 0.0F;
      localDW->LineData25.VariableFansHigh[i] = 0.0F;
      localDW->LineData25.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData25.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData25.OnSequenceDelay = 0;
    localDW->LineData25.LineNumber = 0;
    localDW->LineData24.BreakpointLow.X = 0.0F;
    localDW->LineData24.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData24.InletsLow[0] = 0.0F;
    localDW->LineData24.InletsLow[1] = 0.0F;
    localDW->LineData24.InletsLow[2] = 0.0F;
    localDW->LineData24.PressureLow = 0.0F;
    localDW->LineData24.VentilationCapacityLow = 0.0F;
    localDW->LineData24.ModulationPercentageLow = 0.0F;
    localDW->LineData24.BreakpointHigh.X = 0.0F;
    localDW->LineData24.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData24.InletsHigh[0] = 0.0F;
    localDW->LineData24.InletsHigh[1] = 0.0F;
    localDW->LineData24.InletsHigh[2] = 0.0F;
    localDW->LineData24.PressureHigh = 0.0F;
    localDW->LineData24.VentilationCapacityHigh = 0.0F;
    localDW->LineData24.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData24.VariableFansLow[i] = 0.0F;
      localDW->LineData24.ButterflyValveLow[i] = 0.0F;
      localDW->LineData24.VariableFansHigh[i] = 0.0F;
      localDW->LineData24.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData24.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData24.OnSequenceDelay = 0;
    localDW->LineData24.LineNumber = 0;
    localDW->LineData15.BreakpointLow.X = 0.0F;
    localDW->LineData15.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData15.InletsLow[0] = 0.0F;
    localDW->LineData15.InletsLow[1] = 0.0F;
    localDW->LineData15.InletsLow[2] = 0.0F;
    localDW->LineData15.PressureLow = 0.0F;
    localDW->LineData15.VentilationCapacityLow = 0.0F;
    localDW->LineData15.ModulationPercentageLow = 0.0F;
    localDW->LineData15.BreakpointHigh.X = 0.0F;
    localDW->LineData15.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData15.InletsHigh[0] = 0.0F;
    localDW->LineData15.InletsHigh[1] = 0.0F;
    localDW->LineData15.InletsHigh[2] = 0.0F;
    localDW->LineData15.PressureHigh = 0.0F;
    localDW->LineData15.VentilationCapacityHigh = 0.0F;
    localDW->LineData15.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData15.VariableFansLow[i] = 0.0F;
      localDW->LineData15.ButterflyValveLow[i] = 0.0F;
      localDW->LineData15.VariableFansHigh[i] = 0.0F;
      localDW->LineData15.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData15.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData15.OnSequenceDelay = 0;
    localDW->LineData15.LineNumber = 0;
    localDW->LineData10.BreakpointLow.X = 0.0F;
    localDW->LineData10.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData10.InletsLow[0] = 0.0F;
    localDW->LineData10.InletsLow[1] = 0.0F;
    localDW->LineData10.InletsLow[2] = 0.0F;
    localDW->LineData10.PressureLow = 0.0F;
    localDW->LineData10.VentilationCapacityLow = 0.0F;
    localDW->LineData10.ModulationPercentageLow = 0.0F;
    localDW->LineData10.BreakpointHigh.X = 0.0F;
    localDW->LineData10.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData10.InletsHigh[0] = 0.0F;
    localDW->LineData10.InletsHigh[1] = 0.0F;
    localDW->LineData10.InletsHigh[2] = 0.0F;
    localDW->LineData10.PressureHigh = 0.0F;
    localDW->LineData10.VentilationCapacityHigh = 0.0F;
    localDW->LineData10.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData10.VariableFansLow[i] = 0.0F;
      localDW->LineData10.ButterflyValveLow[i] = 0.0F;
      localDW->LineData10.VariableFansHigh[i] = 0.0F;
      localDW->LineData10.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData10.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData10.OnSequenceDelay = 0;
    localDW->LineData10.LineNumber = 0;
    localDW->LineData29.BreakpointLow.X = 0.0F;
    localDW->LineData29.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData29.InletsLow[0] = 0.0F;
    localDW->LineData29.InletsLow[1] = 0.0F;
    localDW->LineData29.InletsLow[2] = 0.0F;
    localDW->LineData29.PressureLow = 0.0F;
    localDW->LineData29.VentilationCapacityLow = 0.0F;
    localDW->LineData29.ModulationPercentageLow = 0.0F;
    localDW->LineData29.BreakpointHigh.X = 0.0F;
    localDW->LineData29.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData29.InletsHigh[0] = 0.0F;
    localDW->LineData29.InletsHigh[1] = 0.0F;
    localDW->LineData29.InletsHigh[2] = 0.0F;
    localDW->LineData29.PressureHigh = 0.0F;
    localDW->LineData29.VentilationCapacityHigh = 0.0F;
    localDW->LineData29.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData29.VariableFansLow[i] = 0.0F;
      localDW->LineData29.ButterflyValveLow[i] = 0.0F;
      localDW->LineData29.VariableFansHigh[i] = 0.0F;
      localDW->LineData29.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData29.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData29.OnSequenceDelay = 0;
    localDW->LineData29.LineNumber = 0;
    localDW->LineData12.BreakpointLow.X = 0.0F;
    localDW->LineData12.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData12.InletsLow[0] = 0.0F;
    localDW->LineData12.InletsLow[1] = 0.0F;
    localDW->LineData12.InletsLow[2] = 0.0F;
    localDW->LineData12.PressureLow = 0.0F;
    localDW->LineData12.VentilationCapacityLow = 0.0F;
    localDW->LineData12.ModulationPercentageLow = 0.0F;
    localDW->LineData12.BreakpointHigh.X = 0.0F;
    localDW->LineData12.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData12.InletsHigh[0] = 0.0F;
    localDW->LineData12.InletsHigh[1] = 0.0F;
    localDW->LineData12.InletsHigh[2] = 0.0F;
    localDW->LineData12.PressureHigh = 0.0F;
    localDW->LineData12.VentilationCapacityHigh = 0.0F;
    localDW->LineData12.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData12.VariableFansLow[i] = 0.0F;
      localDW->LineData12.ButterflyValveLow[i] = 0.0F;
      localDW->LineData12.VariableFansHigh[i] = 0.0F;
      localDW->LineData12.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData12.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData12.OnSequenceDelay = 0;
    localDW->LineData12.LineNumber = 0;
    localDW->LineData13.BreakpointLow.X = 0.0F;
    localDW->LineData13.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData13.InletsLow[0] = 0.0F;
    localDW->LineData13.InletsLow[1] = 0.0F;
    localDW->LineData13.InletsLow[2] = 0.0F;
    localDW->LineData13.PressureLow = 0.0F;
    localDW->LineData13.VentilationCapacityLow = 0.0F;
    localDW->LineData13.ModulationPercentageLow = 0.0F;
    localDW->LineData13.BreakpointHigh.X = 0.0F;
    localDW->LineData13.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData13.InletsHigh[0] = 0.0F;
    localDW->LineData13.InletsHigh[1] = 0.0F;
    localDW->LineData13.InletsHigh[2] = 0.0F;
    localDW->LineData13.PressureHigh = 0.0F;
    localDW->LineData13.VentilationCapacityHigh = 0.0F;
    localDW->LineData13.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData13.VariableFansLow[i] = 0.0F;
      localDW->LineData13.ButterflyValveLow[i] = 0.0F;
      localDW->LineData13.VariableFansHigh[i] = 0.0F;
      localDW->LineData13.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData13.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData13.OnSequenceDelay = 0;
    localDW->LineData13.LineNumber = 0;
    localDW->LineData23.BreakpointLow.X = 0.0F;
    localDW->LineData23.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData23.InletsLow[0] = 0.0F;
    localDW->LineData23.InletsLow[1] = 0.0F;
    localDW->LineData23.InletsLow[2] = 0.0F;
    localDW->LineData23.PressureLow = 0.0F;
    localDW->LineData23.VentilationCapacityLow = 0.0F;
    localDW->LineData23.ModulationPercentageLow = 0.0F;
    localDW->LineData23.BreakpointHigh.X = 0.0F;
    localDW->LineData23.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData23.InletsHigh[0] = 0.0F;
    localDW->LineData23.InletsHigh[1] = 0.0F;
    localDW->LineData23.InletsHigh[2] = 0.0F;
    localDW->LineData23.PressureHigh = 0.0F;
    localDW->LineData23.VentilationCapacityHigh = 0.0F;
    localDW->LineData23.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData23.VariableFansLow[i] = 0.0F;
      localDW->LineData23.ButterflyValveLow[i] = 0.0F;
      localDW->LineData23.VariableFansHigh[i] = 0.0F;
      localDW->LineData23.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData23.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData23.OnSequenceDelay = 0;
    localDW->LineData23.LineNumber = 0;
    localDW->LineData27.BreakpointLow.X = 0.0F;
    localDW->LineData27.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData27.InletsLow[0] = 0.0F;
    localDW->LineData27.InletsLow[1] = 0.0F;
    localDW->LineData27.InletsLow[2] = 0.0F;
    localDW->LineData27.PressureLow = 0.0F;
    localDW->LineData27.VentilationCapacityLow = 0.0F;
    localDW->LineData27.ModulationPercentageLow = 0.0F;
    localDW->LineData27.BreakpointHigh.X = 0.0F;
    localDW->LineData27.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData27.InletsHigh[0] = 0.0F;
    localDW->LineData27.InletsHigh[1] = 0.0F;
    localDW->LineData27.InletsHigh[2] = 0.0F;
    localDW->LineData27.PressureHigh = 0.0F;
    localDW->LineData27.VentilationCapacityHigh = 0.0F;
    localDW->LineData27.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData27.VariableFansLow[i] = 0.0F;
      localDW->LineData27.ButterflyValveLow[i] = 0.0F;
      localDW->LineData27.VariableFansHigh[i] = 0.0F;
      localDW->LineData27.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData27.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData27.OnSequenceDelay = 0;
    localDW->LineData27.LineNumber = 0;
    localDW->LineData30.BreakpointLow.X = 0.0F;
    localDW->LineData30.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData30.InletsLow[0] = 0.0F;
    localDW->LineData30.InletsLow[1] = 0.0F;
    localDW->LineData30.InletsLow[2] = 0.0F;
    localDW->LineData30.PressureLow = 0.0F;
    localDW->LineData30.VentilationCapacityLow = 0.0F;
    localDW->LineData30.ModulationPercentageLow = 0.0F;
    localDW->LineData30.BreakpointHigh.X = 0.0F;
    localDW->LineData30.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData30.InletsHigh[0] = 0.0F;
    localDW->LineData30.InletsHigh[1] = 0.0F;
    localDW->LineData30.InletsHigh[2] = 0.0F;
    localDW->LineData30.PressureHigh = 0.0F;
    localDW->LineData30.VentilationCapacityHigh = 0.0F;
    localDW->LineData30.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData30.VariableFansLow[i] = 0.0F;
      localDW->LineData30.ButterflyValveLow[i] = 0.0F;
      localDW->LineData30.VariableFansHigh[i] = 0.0F;
      localDW->LineData30.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData30.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData30.OnSequenceDelay = 0;
    localDW->LineData30.LineNumber = 0;
    localDW->LineData31.BreakpointLow.X = 0.0F;
    localDW->LineData31.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData31.InletsLow[0] = 0.0F;
    localDW->LineData31.InletsLow[1] = 0.0F;
    localDW->LineData31.InletsLow[2] = 0.0F;
    localDW->LineData31.PressureLow = 0.0F;
    localDW->LineData31.VentilationCapacityLow = 0.0F;
    localDW->LineData31.ModulationPercentageLow = 0.0F;
    localDW->LineData31.BreakpointHigh.X = 0.0F;
    localDW->LineData31.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData31.InletsHigh[0] = 0.0F;
    localDW->LineData31.InletsHigh[1] = 0.0F;
    localDW->LineData31.InletsHigh[2] = 0.0F;
    localDW->LineData31.PressureHigh = 0.0F;
    localDW->LineData31.VentilationCapacityHigh = 0.0F;
    localDW->LineData31.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData31.VariableFansLow[i] = 0.0F;
      localDW->LineData31.ButterflyValveLow[i] = 0.0F;
      localDW->LineData31.VariableFansHigh[i] = 0.0F;
      localDW->LineData31.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData31.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData31.OnSequenceDelay = 0;
    localDW->LineData31.LineNumber = 0;
    localDW->LineData26.BreakpointLow.X = 0.0F;
    localDW->LineData26.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData26.InletsLow[0] = 0.0F;
    localDW->LineData26.InletsLow[1] = 0.0F;
    localDW->LineData26.InletsLow[2] = 0.0F;
    localDW->LineData26.PressureLow = 0.0F;
    localDW->LineData26.VentilationCapacityLow = 0.0F;
    localDW->LineData26.ModulationPercentageLow = 0.0F;
    localDW->LineData26.BreakpointHigh.X = 0.0F;
    localDW->LineData26.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData26.InletsHigh[0] = 0.0F;
    localDW->LineData26.InletsHigh[1] = 0.0F;
    localDW->LineData26.InletsHigh[2] = 0.0F;
    localDW->LineData26.PressureHigh = 0.0F;
    localDW->LineData26.VentilationCapacityHigh = 0.0F;
    localDW->LineData26.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData26.VariableFansLow[i] = 0.0F;
      localDW->LineData26.ButterflyValveLow[i] = 0.0F;
      localDW->LineData26.VariableFansHigh[i] = 0.0F;
      localDW->LineData26.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData26.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData26.OnSequenceDelay = 0;
    localDW->LineData26.LineNumber = 0;
    localDW->LineData28.BreakpointLow.X = 0.0F;
    localDW->LineData28.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData28.InletsLow[0] = 0.0F;
    localDW->LineData28.InletsLow[1] = 0.0F;
    localDW->LineData28.InletsLow[2] = 0.0F;
    localDW->LineData28.PressureLow = 0.0F;
    localDW->LineData28.VentilationCapacityLow = 0.0F;
    localDW->LineData28.ModulationPercentageLow = 0.0F;
    localDW->LineData28.BreakpointHigh.X = 0.0F;
    localDW->LineData28.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData28.InletsHigh[0] = 0.0F;
    localDW->LineData28.InletsHigh[1] = 0.0F;
    localDW->LineData28.InletsHigh[2] = 0.0F;
    localDW->LineData28.PressureHigh = 0.0F;
    localDW->LineData28.VentilationCapacityHigh = 0.0F;
    localDW->LineData28.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData28.VariableFansLow[i] = 0.0F;
      localDW->LineData28.ButterflyValveLow[i] = 0.0F;
      localDW->LineData28.VariableFansHigh[i] = 0.0F;
      localDW->LineData28.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData28.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData28.OnSequenceDelay = 0;
    localDW->LineData28.LineNumber = 0;
    localDW->LineData20.BreakpointLow.X = 0.0F;
    localDW->LineData20.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData20.InletsLow[0] = 0.0F;
    localDW->LineData20.InletsLow[1] = 0.0F;
    localDW->LineData20.InletsLow[2] = 0.0F;
    localDW->LineData20.PressureLow = 0.0F;
    localDW->LineData20.VentilationCapacityLow = 0.0F;
    localDW->LineData20.ModulationPercentageLow = 0.0F;
    localDW->LineData20.BreakpointHigh.X = 0.0F;
    localDW->LineData20.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData20.InletsHigh[0] = 0.0F;
    localDW->LineData20.InletsHigh[1] = 0.0F;
    localDW->LineData20.InletsHigh[2] = 0.0F;
    localDW->LineData20.PressureHigh = 0.0F;
    localDW->LineData20.VentilationCapacityHigh = 0.0F;
    localDW->LineData20.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData20.VariableFansLow[i] = 0.0F;
      localDW->LineData20.ButterflyValveLow[i] = 0.0F;
      localDW->LineData20.VariableFansHigh[i] = 0.0F;
      localDW->LineData20.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData20.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData20.OnSequenceDelay = 0;
    localDW->LineData20.LineNumber = 0;
    localDW->LineData18.BreakpointLow.X = 0.0F;
    localDW->LineData18.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData18.InletsLow[0] = 0.0F;
    localDW->LineData18.InletsLow[1] = 0.0F;
    localDW->LineData18.InletsLow[2] = 0.0F;
    localDW->LineData18.PressureLow = 0.0F;
    localDW->LineData18.VentilationCapacityLow = 0.0F;
    localDW->LineData18.ModulationPercentageLow = 0.0F;
    localDW->LineData18.BreakpointHigh.X = 0.0F;
    localDW->LineData18.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData18.InletsHigh[0] = 0.0F;
    localDW->LineData18.InletsHigh[1] = 0.0F;
    localDW->LineData18.InletsHigh[2] = 0.0F;
    localDW->LineData18.PressureHigh = 0.0F;
    localDW->LineData18.VentilationCapacityHigh = 0.0F;
    localDW->LineData18.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData18.VariableFansLow[i] = 0.0F;
      localDW->LineData18.ButterflyValveLow[i] = 0.0F;
      localDW->LineData18.VariableFansHigh[i] = 0.0F;
      localDW->LineData18.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData18.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData18.OnSequenceDelay = 0;
    localDW->LineData18.LineNumber = 0;
    localDW->LineData16.BreakpointLow.X = 0.0F;
    localDW->LineData16.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData16.InletsLow[0] = 0.0F;
    localDW->LineData16.InletsLow[1] = 0.0F;
    localDW->LineData16.InletsLow[2] = 0.0F;
    localDW->LineData16.PressureLow = 0.0F;
    localDW->LineData16.VentilationCapacityLow = 0.0F;
    localDW->LineData16.ModulationPercentageLow = 0.0F;
    localDW->LineData16.BreakpointHigh.X = 0.0F;
    localDW->LineData16.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData16.InletsHigh[0] = 0.0F;
    localDW->LineData16.InletsHigh[1] = 0.0F;
    localDW->LineData16.InletsHigh[2] = 0.0F;
    localDW->LineData16.PressureHigh = 0.0F;
    localDW->LineData16.VentilationCapacityHigh = 0.0F;
    localDW->LineData16.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData16.VariableFansLow[i] = 0.0F;
      localDW->LineData16.ButterflyValveLow[i] = 0.0F;
      localDW->LineData16.VariableFansHigh[i] = 0.0F;
      localDW->LineData16.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData16.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData16.OnSequenceDelay = 0;
    localDW->LineData16.LineNumber = 0;
    localDW->LineData9.BreakpointLow.X = 0.0F;
    localDW->LineData9.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData9.InletsLow[0] = 0.0F;
    localDW->LineData9.InletsLow[1] = 0.0F;
    localDW->LineData9.InletsLow[2] = 0.0F;
    localDW->LineData9.PressureLow = 0.0F;
    localDW->LineData9.VentilationCapacityLow = 0.0F;
    localDW->LineData9.ModulationPercentageLow = 0.0F;
    localDW->LineData9.BreakpointHigh.X = 0.0F;
    localDW->LineData9.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData9.InletsHigh[0] = 0.0F;
    localDW->LineData9.InletsHigh[1] = 0.0F;
    localDW->LineData9.InletsHigh[2] = 0.0F;
    localDW->LineData9.PressureHigh = 0.0F;
    localDW->LineData9.VentilationCapacityHigh = 0.0F;
    localDW->LineData9.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData9.VariableFansLow[i] = 0.0F;
      localDW->LineData9.ButterflyValveLow[i] = 0.0F;
      localDW->LineData9.VariableFansHigh[i] = 0.0F;
      localDW->LineData9.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData9.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData9.OnSequenceDelay = 0;
    localDW->LineData9.LineNumber = 0;
    localDW->LineData17.BreakpointLow.X = 0.0F;
    localDW->LineData17.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData17.InletsLow[0] = 0.0F;
    localDW->LineData17.InletsLow[1] = 0.0F;
    localDW->LineData17.InletsLow[2] = 0.0F;
    localDW->LineData17.PressureLow = 0.0F;
    localDW->LineData17.VentilationCapacityLow = 0.0F;
    localDW->LineData17.ModulationPercentageLow = 0.0F;
    localDW->LineData17.BreakpointHigh.X = 0.0F;
    localDW->LineData17.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData17.InletsHigh[0] = 0.0F;
    localDW->LineData17.InletsHigh[1] = 0.0F;
    localDW->LineData17.InletsHigh[2] = 0.0F;
    localDW->LineData17.PressureHigh = 0.0F;
    localDW->LineData17.VentilationCapacityHigh = 0.0F;
    localDW->LineData17.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData17.VariableFansLow[i] = 0.0F;
      localDW->LineData17.ButterflyValveLow[i] = 0.0F;
      localDW->LineData17.VariableFansHigh[i] = 0.0F;
      localDW->LineData17.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData17.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData17.OnSequenceDelay = 0;
    localDW->LineData17.LineNumber = 0;
    localDW->LineData14.BreakpointLow.X = 0.0F;
    localDW->LineData14.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData14.InletsLow[0] = 0.0F;
    localDW->LineData14.InletsLow[1] = 0.0F;
    localDW->LineData14.InletsLow[2] = 0.0F;
    localDW->LineData14.PressureLow = 0.0F;
    localDW->LineData14.VentilationCapacityLow = 0.0F;
    localDW->LineData14.ModulationPercentageLow = 0.0F;
    localDW->LineData14.BreakpointHigh.X = 0.0F;
    localDW->LineData14.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData14.InletsHigh[0] = 0.0F;
    localDW->LineData14.InletsHigh[1] = 0.0F;
    localDW->LineData14.InletsHigh[2] = 0.0F;
    localDW->LineData14.PressureHigh = 0.0F;
    localDW->LineData14.VentilationCapacityHigh = 0.0F;
    localDW->LineData14.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData14.VariableFansLow[i] = 0.0F;
      localDW->LineData14.ButterflyValveLow[i] = 0.0F;
      localDW->LineData14.VariableFansHigh[i] = 0.0F;
      localDW->LineData14.ButterflyValveHigh[i] = 0.0F;
    }

    std::memset(&localDW->LineData14.OnOffFans[0], 0, 20U * sizeof(int32_T));
    localDW->LineData14.OnSequenceDelay = 0;
    localDW->LineData14.LineNumber = 0;
    localDW->LineData11.BreakpointLow.X = 0.0F;
    localDW->LineData11.BreakpointLow.Hysteresis = 0.0F;
    localDW->LineData11.InletsLow[0] = 0.0F;
    localDW->LineData11.InletsLow[1] = 0.0F;
    localDW->LineData11.InletsLow[2] = 0.0F;
    localDW->LineData11.PressureLow = 0.0F;
    localDW->LineData11.VentilationCapacityLow = 0.0F;
    localDW->LineData11.ModulationPercentageLow = 0.0F;
    localDW->LineData11.BreakpointHigh.X = 0.0F;
    localDW->LineData11.BreakpointHigh.Hysteresis = 0.0F;
    localDW->LineData11.InletsHigh[0] = 0.0F;
    localDW->LineData11.InletsHigh[1] = 0.0F;
    localDW->LineData11.InletsHigh[2] = 0.0F;
    localDW->LineData11.PressureHigh = 0.0F;
    localDW->LineData11.VentilationCapacityHigh = 0.0F;
    localDW->LineData11.ModulationPercentageHigh = 0.0F;
    for (i = 0; i < 8; i++) {
      localDW->LineData11.VariableFansLow[i] = 0.0F;
      localDW->LineData11.ButterflyValveLow[i] = 0.0F;
      localDW->LineData11.VariableFansHigh[i] = 0.0F;
      localDW->LineData11.ButterflyValveHigh[i] = 0.0F;
    }

    localDW->LineData11.OnSequenceDelay = 0;
    localDW->LineData11.LineNumber = 0;
    *rty_MainState = 0;
    std::memset(&localDW->LineData11.OnOffFans[0], 0, 20U * sizeof(int32_T));
    std::memset(&rty_OnOffFans[0], 0, 20U * sizeof(int32_T));
    *rty_Pressure = 0.0F;
    *rty_VentilationCapacity = 0.0F;
    *rty_ModulatingPercentage = 0.0F;
    rty_Inlets[0] = 0.0F;
    rty_InletsLow[0] = 0.0F;
    rty_InletsHigh[0] = 0.0F;
    rty_Inlets[1] = 0.0F;
    rty_InletsLow[1] = 0.0F;
    rty_InletsHigh[1] = 0.0F;
    rty_Inlets[2] = 0.0F;
    rty_InletsLow[2] = 0.0F;
    rty_InletsHigh[2] = 0.0F;
    for (i = 0; i < 8; i++) {
      rty_VariableFans[i] = 0.0F;
      rty_ButterflyValves[i] = 0.0F;
      rty_VariableFansLow[i] = 0.0F;
      rty_VariableFansHigh[i] = 0.0F;
    }
  }

  //
  // Output and update for atomic system:
  //    '<S2>/MTSetpointToFanMapping'
  //    '<S2>/TunnelSetpointToFanMapping'
  //
  void FancomVentilationController::MTSetpointToFanMapping(real32_T rtu_Setpoint,
    int32_T rtu_MaxLineAllowed, const ConfBus *rtu_Conf, int32_T *rty_MainState,
    int32_T rty_OnOffFans[20], real32_T rty_VariableFans[8], real32_T
    rty_ButterflyValves[8], real32_T rty_Inlets[3], real32_T *rty_Pressure,
    real32_T *rty_VentilationCapacity, real32_T *rty_ModulatingPercentage,
    real32_T rty_InletsLow[3], real32_T rty_InletsHigh[3], real32_T
    rty_VariableFansLow[8], real32_T rty_VariableFansHigh[8],
    DW_MTSetpointToFanMapping *localDW)
  {
    // Chart: '<S2>/MTSetpointToFanMapping'
    if (localDW->bitsForTID0.is_active_c5_setpointtofanmapping_stateflow_lib ==
        0U) {
      localDW->bitsForTID0.is_active_c5_setpointtofanmapping_stateflow_lib = 1U;
      enter_internal_c5_setpointtofanmapping_stateflow_lib(rtu_Setpoint,
        rtu_MaxLineAllowed, rtu_Conf, rty_MainState, rty_OnOffFans,
        rty_VariableFans, rty_ButterflyValves, rty_Inlets, rty_Pressure,
        rty_VentilationCapacity, rty_ModulatingPercentage, rty_InletsLow,
        rty_InletsHigh, rty_VariableFansLow, rty_VariableFansHigh, localDW);
    } else {
      switch (localDW->bitsForTID0.is_c5_setpointtofanmapping_stateflow_lib) {
       case IN_ErrorHigh:
        ErrorHigh(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState, rty_OnOffFans,
                  rty_VariableFans, rty_ButterflyValves, rty_Inlets,
                  rty_Pressure, rty_VentilationCapacity,
                  rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                  rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_ErrorLow:
        ErrorLow(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState, rty_OnOffFans,
                 rty_VariableFans, rty_ButterflyValves, rty_Inlets, rty_Pressure,
                 rty_VentilationCapacity, rty_ModulatingPercentage,
                 rty_InletsLow, rty_InletsHigh, rty_VariableFansLow,
                 rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine1:
        TunnelLine1_m(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                      rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                      rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                      rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                      rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine10:
        TunnelLine10(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine11:
        TunnelLine11(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine12:
        TunnelLine12(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine13:
        TunnelLine13(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine14:
        TunnelLine14(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine15:
        TunnelLine15(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine16:
        TunnelLine16(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine17:
        TunnelLine17(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine18:
        TunnelLine18(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine19:
        TunnelLine19(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine2:
        TunnelLine2(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine20:
        TunnelLine20(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine21:
        TunnelLine21(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine22:
        TunnelLine22(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine23:
        TunnelLine23(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine24:
        TunnelLine24(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine25:
        TunnelLine25(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine26:
        TunnelLine26(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine27:
        TunnelLine27(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine28:
        TunnelLine28(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine29:
        TunnelLine29(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine3:
        TunnelLine3(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine30:
        TunnelLine30(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine31:
        TunnelLine31(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine32:
        TunnelLine32(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                     rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                     rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                     rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                     rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine4:
        TunnelLine4(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine5:
        TunnelLine5(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine6:
        TunnelLine6(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine7:
        TunnelLine7(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       case IN_TunnelLine8:
        TunnelLine8(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;

       default:
        // case IN_TunnelLine9:
        TunnelLine9(rtu_Setpoint, rtu_MaxLineAllowed, rty_MainState,
                    rty_OnOffFans, rty_VariableFans, rty_ButterflyValves,
                    rty_Inlets, rty_Pressure, rty_VentilationCapacity,
                    rty_ModulatingPercentage, rty_InletsLow, rty_InletsHigh,
                    rty_VariableFansLow, rty_VariableFansHigh, localDW);
        break;
      }
    }

    // End of Chart: '<S2>/MTSetpointToFanMapping'
  }
}

namespace NS_FANCOM
{
  // Model step function
  void FancomVentilationController::step()
  {
    // local scratch DWork variables
    int32_T ForEach_itr;
    int64_T tmp;
    real_T rtb_MultiportSwitch_idx_0;
    real_T rtb_MultiportSwitch_idx_1;
    real_T rtb_MultiportSwitch_idx_2;
    int32_T rtb_OnOffFans[20];
    int32_T rtb_Switch2_k[20];
    int32_T exitg1;
    int32_T i;
    int32_T rtb_PulseGenerator;
    int32_T rtb_yAtLeastOneOnOffFanModulates;
    int32_T rtb_yLinkedVarFanModulates;
    int32_T rtb_yVarFanCtrl;
    int32_T u0;
    real32_T rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[8];
    real32_T rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[8];
    real32_T rtb_VariableFans[8];
    real32_T rtb_InletsLow_0[2];
    real32_T rtb_Selector6_0[2];
    real32_T LowestPercentage;
    real32_T r;
    real32_T rtb_InletsLow_idx_0;
    real32_T rtb_Inlets_h_idx_0;
    real32_T rtb_Inlets_h_idx_1;
    real32_T rtb_ModulatingPercentage;
    real32_T rtb_Selector6;
    real32_T rtb_Switch2;
    real32_T rtb_TotalPeriod;
    boolean_T rtb_ResetFilter;
    ZCEventType zcEvent;

    // Sum: '<S3>/Sum2' incorporates:
    //   Inport: '<Root>/ventilationParam'

    rtb_Selector6 =
      rtU.ventilationParam.ventilationSetpointGeneratorParam.TemperatureSetpoint
      + rtU.ventilationParam.ventilationSetpointGeneratorParam.TemperatureVentilationStartOffset;

    // Sum: '<S3>/Sum1' incorporates:
    //   Inport: '<Root>/ventilationParam'

    rtb_Switch2 = rtb_Selector6 +
      rtU.ventilationParam.ventilationSetpointGeneratorParam.TemperatureVentilationBandwidth;

    // Sum: '<S3>/Minus' incorporates:
    //   Inport: '<Root>/ventilationInput'

    rtDW.TemperatureVentilationTunnelStartOffset =
      rtU.ventilationInput.ventilationSetpointGeneratorInput.TemperatureMeasured
      - rtb_Switch2;

    // Chart: '<S2>/TunnelSetpointToFanMapping' incorporates:
    //   BusCreator generated from: '<S2>/TunnelSetpointToFanMapping'
    //   Inport: '<Root>/ventilationParam'

    MTSetpointToFanMapping(rtDW.TemperatureVentilationTunnelStartOffset,
      rtU.ventilationParam.setpointToFanMappingParameters.TunnelParameters.MaxAllowedStep,
      &rtU.ventilationParam.setpointToFanMappingParameters.TunnelParameters,
      &rtDW.MainState, rtDW.OnOffFans, rtDW.VariableFans, rtDW.ButterflyValves,
      rtDW.Inlets, &rtDW.Pressure, &rtDW.VentilationCapacity,
      &rtDW.ModulatingPercentage, rtDW.InletsLow, rtDW.InletsHigh,
      rtDW.VariableFansLow, rtDW.VariableFansHigh,
      &rtDW.sf_TunnelSetpointToFanMapping);

    // SignalConversion generated from: '<S3>/Ventilation Graph'
    rtb_Selector6_0[0] = rtb_Selector6;
    rtb_Selector6_0[1] = rtb_Switch2;

    // SignalConversion generated from: '<S3>/Ventilation Graph' incorporates:
    //   Inport: '<Root>/ventilationParam'

    rtb_InletsLow_0[0] =
      rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMinimum;
    rtb_InletsLow_0[1] =
      rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMaximum;

    // Lookup_n-D: '<S3>/Ventilation Graph' incorporates:
    //   Inport: '<Root>/ventilationInput'

    rtb_Selector6 = look1_iflf_lingc
      (rtU.ventilationInput.ventilationSetpointGeneratorInput.TemperatureMeasured,
       rtb_Selector6_0, rtb_InletsLow_0, 1U);

    // Outputs for Atomic SubSystem: '<S118>/Memory'
    // Switch: '<S122>/Switch' incorporates:
    //   Delay: '<S118>/Delay'
    //   Delay: '<S122>/Delay'
    //   Inport: '<Root>/ventilationCommand'
    //   Logic: '<S118>/OR'

    if ((rtU.ventilationCommand.ventilationSetpointGeneratorCommand.ResetVentilationSetpointGenerator
         != 0) || (rtDW.Delay_DSTATE != 0.0)) {
      rtDW.Delay_DSTATE_c =
        rtU.ventilationCommand.ventilationSetpointGeneratorCommand.ResetVentilationSetpointGenerator;
    }

    // End of Switch: '<S122>/Switch'
    // End of Outputs for SubSystem: '<S118>/Memory'

    // DiscretePulseGenerator: '<S118>/Pulse Generator'
    rtb_PulseGenerator = ((rtDW.clockTickCounter < 10) && (rtDW.clockTickCounter
      >= 0));
    if (rtDW.clockTickCounter >= 119) {
      rtDW.clockTickCounter = 0;
    } else {
      rtDW.clockTickCounter++;
    }

    // End of DiscretePulseGenerator: '<S118>/Pulse Generator'

    // Outputs for Triggered SubSystem: '<S118>/BucketDampingDiscrete' incorporates:
    //   TriggerPort: '<S121>/Trigger'

    zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
                       &rtPrevZCX.BucketDampingDiscrete_Trig_ZCE,
                       (static_cast<real_T>(rtb_PulseGenerator)));
    if (zcEvent != NO_ZCEVENT) {
      // Logic: '<S123>/OR' incorporates:
      //   Delay: '<S122>/Delay'
      //   Delay: '<S123>/Delay2'

      rtb_ResetFilter = ((rtDW.Delay2_DSTATE != 0) || (rtDW.Delay_DSTATE_c != 0));

      // Delay: '<S125>/BucketMemory'
      if (rtb_ResetFilter) {
        rtDW.BucketMemory_DSTATE = 0.0;
      }

      // Sum: '<S125>/Sum1' incorporates:
      //   Delay: '<S123>/Delay3'
      //   Delay: '<S125>/BucketMemory'
      //   Sum: '<S123>/Sum1'

      rtDW.BucketMemory_DSTATE += rtb_Selector6 - rtDW.Delay3_DSTATE;

      // MultiPortSwitch: '<S124>/Multiport Switch' incorporates:
      //   Constant: '<S130>/BucketMax'
      //   Constant: '<S130>/CorrectionFactor//Speed'
      //   Constant: '<S131>/BucketMax'
      //   Constant: '<S131>/CorrectionFactor//Speed'
      //   Constant: '<S132>/BucketMax'
      //   Constant: '<S132>/CorrectionFactor//Speed'
      //   Constant: '<S133>/BucketMax'
      //   Constant: '<S133>/CorrectionFactor//Speed'
      //   Constant: '<S134>/BucketMax'
      //   Constant: '<S134>/CorrectionFactor//Speed'
      //   Inport: '<Root>/ventilationParam'

      switch
        (rtU.ventilationParam.ventilationSetpointGeneratorParam.BucketFilterMode)
      {
       case 0:
        rtb_MultiportSwitch_idx_0 = 8.5;
        rtb_MultiportSwitch_idx_1 = rtConstB.MaxSamples_f;
        rtb_MultiportSwitch_idx_2 = 0.5;
        break;

       case 1:
        rtb_MultiportSwitch_idx_0 = 12.5;
        rtb_MultiportSwitch_idx_1 = rtConstB.MaxSamples;
        rtb_MultiportSwitch_idx_2 = 0.3;
        break;

       case 2:
        rtb_MultiportSwitch_idx_0 = 8.5;
        rtb_MultiportSwitch_idx_1 = rtConstB.MaxSamples_o;
        rtb_MultiportSwitch_idx_2 = 0.5;
        break;

       case 3:
        rtb_MultiportSwitch_idx_0 = 4.25;
        rtb_MultiportSwitch_idx_1 = rtConstB.MaxSamples_m;
        rtb_MultiportSwitch_idx_2 = 0.9;
        break;

       default:
        rtb_MultiportSwitch_idx_0 = 8.5;
        rtb_MultiportSwitch_idx_1 = rtConstB.MaxSamples_i;
        rtb_MultiportSwitch_idx_2 = 0.5;
        break;
      }

      // End of MultiPortSwitch: '<S124>/Multiport Switch'

      // Delay: '<S126>/Delay1'
      if (rtb_ResetFilter) {
        rtDW.Delay1_DSTATE = 0.0;
      }

      // Sum: '<S126>/Sum1' incorporates:
      //   Constant: '<S126>/Constant1'
      //   Delay: '<S126>/Delay1'

      rtDW.Delay1_DSTATE++;

      // Logic: '<S125>/AND' incorporates:
      //   Abs: '<S125>/Abs'
      //   Constant: '<S129>/Constant'
      //   Delay: '<S123>/Delay2'
      //   Delay: '<S125>/BucketMemory'
      //   Delay: '<S126>/Delay1'
      //   Logic: '<S125>/OR'
      //   RelationalOperator: '<S125>/Equal'
      //   RelationalOperator: '<S125>/Relational Operator'
      //   RelationalOperator: '<S129>/Compare'

      rtDW.Delay2_DSTATE = (((std::abs(rtDW.BucketMemory_DSTATE) >=
        rtb_MultiportSwitch_idx_0) || (rtDW.Delay1_DSTATE >=
        rtb_MultiportSwitch_idx_1)) && (rtDW.Delay1_DSTATE > 0.0));

      // Outputs for Atomic SubSystem: '<S123>/Memory'
      // Switch: '<S128>/Switch' incorporates:
      //   Delay: '<S123>/Delay2'
      //   Delay: '<S123>/Delay3'
      //   Delay: '<S128>/Delay'
      //   Product: '<S127>/Product'
      //   Sum: '<S127>/Sum2'

      if (rtDW.Delay2_DSTATE > 0) {
        // Switch: '<S125>/Switch' incorporates:
        //   Constant: '<S125>/Constant'
        //   Delay: '<S125>/BucketMemory'

        if (rtDW.Delay2_DSTATE > 0) {
          rtb_MultiportSwitch_idx_0 = rtDW.BucketMemory_DSTATE;
        } else {
          rtb_MultiportSwitch_idx_0 = 0.0;
        }

        // End of Switch: '<S125>/Switch'

        // Product: '<S127>/Divide' incorporates:
        //   Delay: '<S126>/Delay1'

        rtb_MultiportSwitch_idx_0 /= rtDW.Delay1_DSTATE;

        // Switch: '<S127>/Switch' incorporates:
        //   Constant: '<S127>/Constant'
        //   Constant: '<S127>/Constant1'
        //   RelationalOperator: '<S127>/Equal'

        if (rtb_MultiportSwitch_idx_0 <= 0.4) {
          rtb_MultiportSwitch_idx_2 = 1.0;
        }

        // End of Switch: '<S127>/Switch'
        rtDW.Delay3_DSTATE += rtb_MultiportSwitch_idx_0 *
          rtb_MultiportSwitch_idx_2;
      } else {
        rtDW.Delay3_DSTATE = rtDW.Delay_DSTATE_g;
      }

      // End of Switch: '<S128>/Switch'

      // Update for Delay: '<S128>/Delay' incorporates:
      //   Delay: '<S123>/Delay3'

      rtDW.Delay_DSTATE_g = rtDW.Delay3_DSTATE;

      // End of Outputs for SubSystem: '<S123>/Memory'
    }

    // End of Outputs for SubSystem: '<S118>/BucketDampingDiscrete'

    // Switch: '<S3>/Switch' incorporates:
    //   Constant: '<S119>/Constant'
    //   Delay: '<S123>/Delay3'
    //   Inport: '<Root>/ventilationParam'
    //   RelationalOperator: '<S119>/Compare'

    if (rtU.ventilationParam.ventilationSetpointGeneratorParam.BucketFilterMode ==
        0) {
      rtb_MultiportSwitch_idx_2 = rtb_Selector6;
    } else {
      rtb_MultiportSwitch_idx_2 = rtDW.Delay3_DSTATE;
    }

    // End of Switch: '<S3>/Switch'

    // Switch: '<S120>/Switch2' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   RelationalOperator: '<S120>/GreaterThan'
    //   RelationalOperator: '<S120>/Relational Operator'
    //   Switch: '<S120>/Switch1'

    if (rtb_MultiportSwitch_idx_2 <
        rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMinimum)
    {
      // Switch: '<S120>/Switch2'
      rtDW.Switch2 =
        rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMinimum;
    } else if (rtb_MultiportSwitch_idx_2 >
               rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMaximum)
    {
      // Switch: '<S120>/Switch1' incorporates:
      //   Switch: '<S120>/Switch2'

      rtDW.Switch2 =
        rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMaximum;
    } else {
      // Switch: '<S120>/Switch2' incorporates:
      //   Switch: '<S120>/Switch1'

      rtDW.Switch2 = static_cast<real32_T>(rtb_MultiportSwitch_idx_2);
    }

    // End of Switch: '<S120>/Switch2'

    // Logic: '<S45>/Logical Operator' incorporates:
    //   Constant: '<S45>/Constant'
    //   Constant: '<S45>/Constant1'
    //   Constant: '<S48>/Constant'
    //   Constant: '<S52>/Constant'
    //   Inport: '<Root>/ventilationParam'
    //   RelationalOperator: '<S45>/GreaterThanOrEqual'
    //   RelationalOperator: '<S45>/GreaterThanOrEqual1'
    //   RelationalOperator: '<S48>/Compare'
    //   RelationalOperator: '<S52>/Compare'

    rtb_ResetFilter = ((rtDW.Switch2 >= 99.99) &&
                       (rtU.ventilationParam.ventilationSetpointGeneratorParam.VentilationMaximum
                        >= 99.99) && (rtDW.MainState >= 2) &&
                       (rtU.ventilationParam.setpointToFanMappingParameters.TunnelParameters.MaxAllowedStep
                        >= 2));

    // Chart: '<S45>/SwitchDelay' incorporates:
    //   Inport: '<Root>/ventilationParam'

    if (rtDW.bitsForTID0.is_active_c1_setpointtofanmapping_lib == 0U) {
      rtDW.bitsForTID0.is_active_c1_setpointtofanmapping_lib = 1U;
      rtDW.bitsForTID0.is_c1_setpointtofanmapping_lib = IN_MTState;
      rtDW.TunnelPhaseCommand = 0;
    } else if (rtDW.bitsForTID0.is_c1_setpointtofanmapping_lib == 1) {
      if (rtb_ResetFilter) {
        rtDW.bitsForTID0.is_c1_setpointtofanmapping_lib = IN_ToMTStateMonitor;
        rtDW.bitsForTID0.is_ToMTStateMonitor = IN_Timer;
        rtDW.CurrentTime = 0.0F;
      } else {
        rtDW.TunnelPhaseCommand = 0;
      }

      // case IN_ToMTStateMonitor:
    } else if (!rtb_ResetFilter) {
      rtDW.bitsForTID0.is_ToMTStateMonitor = 0U;
      rtDW.bitsForTID0.is_c1_setpointtofanmapping_lib = IN_MTState;
      rtDW.TunnelPhaseCommand = 0;
    } else if (rtDW.bitsForTID0.is_ToMTStateMonitor == 1) {
      if (static_cast<real_T>(rtDW.CurrentTime) >
          rtU.ventilationParam.setpointToFanMappingParameters.TunnelPhaseSwitchDelay)
      {
        rtDW.bitsForTID0.is_ToMTStateMonitor = IN_TunnelState;
        rtDW.TunnelPhaseCommand = 1;
      } else {
        rtDW.CurrentTime += static_cast<real32_T>(rtDW.Ts);
        rtDW.TunnelPhaseCommand = 0;
      }
    } else {
      // case IN_TunnelState:
      rtDW.TunnelPhaseCommand = 1;
    }

    // End of Chart: '<S45>/SwitchDelay'

    // Chart: '<S2>/MTSetpointToFanMapping' incorporates:
    //   BusCreator generated from: '<S2>/MTSetpointToFanMapping'
    //   Inport: '<Root>/ventilationParam'

    MTSetpointToFanMapping(rtDW.Switch2,
      rtU.ventilationParam.setpointToFanMappingParameters.MTParameters.MaxAllowedStep,
      &rtU.ventilationParam.setpointToFanMappingParameters.MTParameters,
      &rtDW.MainState_k, rtDW.OnOffFans_n, rtDW.VariableFans_b,
      rtDW.ButterflyValves_o, rtDW.Inlets_h, &rtDW.Pressure_m,
      &rtDW.VentilationCapacity_g, &rtDW.ModulatingPercentage_h,
      rtDW.InletsLow_a, rtDW.InletsHigh_d, rtDW.VariableFansLow_o,
      rtDW.VariableFansHigh_m, &rtDW.sf_MTSetpointToFanMapping);

    // Switch generated from: '<S45>/Switch'
    for (i = 0; i < 8; i++) {
      if (rtDW.TunnelPhaseCommand >= 1) {
        rtb_VariableFans[i] = rtDW.VariableFans[i];
      } else {
        rtb_VariableFans[i] = rtDW.VariableFans_b[i];
      }
    }

    // Chart: '<S8>/SF_LinkedVarFanModulates' incorporates:
    //   Inport: '<Root>/ventilationParam'

    if (rtDW.bitsForTID0.is_active_c16_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c16_fanscheduler_lib = 1U;
      rtb_Selector6 =
        rtb_VariableFans[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];
      if (rtb_Selector6 > 0.0F) {
        if (rtb_Selector6 <
            rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc)
        {
          rtb_yLinkedVarFanModulates = 1;
        } else {
          rtb_yLinkedVarFanModulates = 0;
        }
      } else {
        rtb_yLinkedVarFanModulates = 0;
      }
    } else {
      rtb_Selector6 =
        rtb_VariableFans[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];
      if (rtb_Selector6 > 0.0F) {
        if (rtb_Selector6 <
            rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc)
        {
          rtb_yLinkedVarFanModulates = 1;
        } else {
          rtb_yLinkedVarFanModulates = 0;
        }
      } else {
        rtb_yLinkedVarFanModulates = 0;
      }
    }

    // End of Chart: '<S8>/SF_LinkedVarFanModulates'

    // Switch generated from: '<S45>/Switch'
    if (rtDW.TunnelPhaseCommand >= 1) {
      std::memcpy(&rtb_OnOffFans[0], &rtDW.OnOffFans[0], 20U * sizeof(int32_T));
    } else {
      std::memcpy(&rtb_OnOffFans[0], &rtDW.OnOffFans_n[0], 20U * sizeof(int32_T));
    }

    // Chart: '<S8>/SF_AtLeastOneOnOffFanModulates'
    if (rtDW.bitsForTID0.is_active_c18_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c18_fanscheduler_lib = 1U;
      i = 1;
      rtb_yAtLeastOneOnOffFanModulates = 0;
      do {
        if (rtb_OnOffFans[i - 1] == 2) {
          rtb_yAtLeastOneOnOffFanModulates = 1;
        }

        i++;
      } while (i <= 20);
    } else {
      i = 1;
      rtb_yAtLeastOneOnOffFanModulates = 0;
      do {
        if (rtb_OnOffFans[i - 1] == 2) {
          rtb_yAtLeastOneOnOffFanModulates = 1;
        }

        i++;
      } while (i <= 20);
    }

    // End of Chart: '<S8>/SF_AtLeastOneOnOffFanModulates'

    // Chart: '<S8>/SF_CtrlMode' incorporates:
    //   Inport: '<Root>/ventilationParam'

    if (rtDW.bitsForTID0.is_active_c17_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c17_fanscheduler_lib = 1U;
      if ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OnOffModulation
           == 1) && (rtb_yAtLeastOneOnOffFanModulates == 0)) {
        rtb_yAtLeastOneOnOffFanModulates = 0;
      } else {
        rtb_yAtLeastOneOnOffFanModulates =
          ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OnOffModulation
            == 1) && (rtb_yAtLeastOneOnOffFanModulates == 1));
      }

      if ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarFanModulation
           == 1) && (rtb_yLinkedVarFanModulates == 0)) {
        rtb_yVarFanCtrl = 0;
      } else {
        rtb_yVarFanCtrl =
          ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarFanModulation
            == 1) && (rtb_yLinkedVarFanModulates == 1));
      }
    } else {
      if ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OnOffModulation
           == 1) && (rtb_yAtLeastOneOnOffFanModulates == 0)) {
        rtb_yAtLeastOneOnOffFanModulates = 0;
      } else {
        rtb_yAtLeastOneOnOffFanModulates =
          ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OnOffModulation
            == 1) && (rtb_yAtLeastOneOnOffFanModulates == 1));
      }

      if ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarFanModulation
           == 1) && (rtb_yLinkedVarFanModulates == 0)) {
        rtb_yVarFanCtrl = 0;
      } else {
        rtb_yVarFanCtrl =
          ((rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarFanModulation
            == 1) && (rtb_yLinkedVarFanModulates == 1));
      }
    }

    // End of Chart: '<S8>/SF_CtrlMode'

    // Switch generated from: '<S45>/Switch' incorporates:
    //   Constant: '<S49>/Constant'
    //   Constant: '<S50>/Constant'
    //   Constant: '<S51>/Constant'
    //   DataTypeConversion: '<S45>/Data Type Conversion'
    //   DataTypeConversion: '<S45>/Data Type Conversion1'
    //   Logic: '<S45>/OR'
    //   Logic: '<S45>/OR1'
    //   RelationalOperator: '<S49>/Compare'
    //   RelationalOperator: '<S50>/Compare'
    //   RelationalOperator: '<S51>/Compare'
    //   Sum: '<S45>/Sum1'
    //   Sum: '<S45>/Sum2'
    //   Sum: '<S45>/Sum3'
    //   UnitDelay: '<S45>/Unit Delay1'
    //   UnitDelay: '<S45>/Unit Delay2'
    //   UnitDelay: '<S45>/Unit Delay3'

    if (rtDW.TunnelPhaseCommand >= 1) {
      rtb_yLinkedVarFanModulates = ((rtDW.MainState - rtDW.UnitDelay2_DSTATE !=
        0) || (static_cast<int8_T>(rtDW.TunnelPhaseCommand -
        rtDW.UnitDelay3_DSTATE) != 0));
    } else {
      rtb_yLinkedVarFanModulates = ((static_cast<int8_T>(rtDW.TunnelPhaseCommand
        - rtDW.UnitDelay3_DSTATE) != 0) || (rtDW.MainState_k -
        rtDW.UnitDelay1_DSTATE != 0));
    }

    // Switch: '<S9>/Switch1' incorporates:
    //   Constant: '<S20>/Constant'
    //   Constant: '<S21>/Constant'
    //   Logic: '<S9>/AND1'
    //   RelationalOperator: '<S20>/Compare'
    //   RelationalOperator: '<S21>/Compare'
    //   UnitDelay: '<S9>/Unit Delay7'
    //   UnitDelay: '<S9>/Unit Delay8'

    if (rtb_yLinkedVarFanModulates > 0) {
      for (i = 0; i < 8; i++) {
        rtDW.UnitDelay8_DSTATE[i] = ((rtb_VariableFans[i] > 0.0F) &&
          (rtDW.UnitDelay7_DSTATE[i] > 0.0F));
      }
    }

    // End of Switch: '<S9>/Switch1'

    // Outputs for Iterator SubSystem: '<S32>/For Each Subsystem' incorporates:
    //   ForEach: '<S33>/For Each'

    for (ForEach_itr = 0; ForEach_itr < 8; ForEach_itr++) {
      // MATLAB Function: '<S34>/MATLAB Function' incorporates:
      //   ForEachSliceSelector generated from: '<S33>/<ModulatingPercentage>'
      //   Inport: '<Root>/ventilationParam'
      //   MATLAB Function: '<S34>/MATLAB Function1'

      rtb_Switch2 = rtb_VariableFans[ForEach_itr];
      if ((rtb_VariableFans[ForEach_itr] < 1.0F) &&
          (rtb_VariableFans[ForEach_itr] > 0.0F)) {
        rtb_Switch2 = 1.0F;
      }

      if ((rtb_Switch2 > 99.5F) && (rtb_Switch2 < 100.0F)) {
        rtb_Switch2 = 100.0F;
      }

      LowestPercentage =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc
        - rtb_Switch2;
      if ((rtb_Switch2 < LowestPercentage) || rtIsNaNF(LowestPercentage)) {
        LowestPercentage = rtb_Switch2;
      }

      rtb_TotalPeriod =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OptOnTime *
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc
        / LowestPercentage;
      if (rtb_TotalPeriod >
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod)
      {
        rtb_TotalPeriod =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
      }

      rtb_Selector6_0[0] = 0.0F;
      rtb_Selector6_0[1] =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc;
      rtb_ModulatingPercentage = 0.0F;
      rtb_Inlets_h_idx_1 = rtb_TotalPeriod;
      r = 0.0F;
      rtb_InletsLow_idx_0 =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc;
      rtb_Selector6 = (rtNaNF);
      i = 0;
      do {
        exitg1 = 0;
        if (i < 2) {
          if (rtIsNaNF(rtb_Selector6_0[i])) {
            exitg1 = 1;
          } else {
            i++;
          }
        } else {
          if (rtb_Selector6_0[1] < 0.0F) {
            r = rtb_Selector6_0[1];
            rtb_InletsLow_idx_0 = 0.0F;
            rtb_ModulatingPercentage = rtb_TotalPeriod;
            rtb_Inlets_h_idx_1 = 0.0F;
          }

          if ((!rtIsNaNF(rtb_Switch2)) && (!(rtb_Switch2 > rtb_InletsLow_idx_0))
              && (!(rtb_Switch2 < r))) {
            r = (rtb_Switch2 - r) / (rtb_InletsLow_idx_0 - r);
            if (r == 0.0F) {
              rtb_Selector6 = rtb_ModulatingPercentage;
            } else if (r == 1.0F) {
              rtb_Selector6 = rtb_Inlets_h_idx_1;
            } else if (rtb_ModulatingPercentage == rtb_Inlets_h_idx_1) {
              rtb_Selector6 = rtb_ModulatingPercentage;
            } else {
              rtb_Selector6 = (1.0F - r) * rtb_ModulatingPercentage + r *
                rtb_Inlets_h_idx_1;
            }
          }

          exitg1 = 1;
        }
      } while (exitg1 == 0);

      if (rtb_Selector6 <
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOnTime)
      {
        rtb_Selector6 =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOnTime;
        rtb_TotalPeriod =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOnTime *
          100.0F / LowestPercentage;
      }

      if (rtb_TotalPeriod - rtb_Selector6 <
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOffTime)
      {
        rtb_TotalPeriod =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOffTime *
          100.0F / LowestPercentage;
        rtb_Selector6 = rtb_TotalPeriod -
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOffTime;
      }

      if (rtb_Switch2 < 0.1) {
        rtb_Selector6 = 0.0F;
      } else if (rtb_Switch2 > 99.9) {
        rtb_Selector6 = rtb_TotalPeriod;
      }

      // MATLAB Function: '<S34>/MATLAB Function1' incorporates:
      //   ForEachSliceSelector generated from: '<S33>/<ModulatingPercentage>'
      //   Inport: '<Root>/ventilationParam'

      rtb_Switch2 = rtb_VariableFans[ForEach_itr];
      if ((rtb_VariableFans[ForEach_itr] < 1.0F) &&
          (rtb_VariableFans[ForEach_itr] > 0.0F)) {
        rtb_Switch2 = 1.0F;
      }

      if (rtb_Switch2 > 99.5F) {
        rtb_Switch2 = 100.0F;
      }

      rtb_ModulatingPercentage = 0.0F;
      rtb_Inlets_h_idx_1 =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
      LowestPercentage = (rtNaNF);
      i = 0;
      do {
        exitg1 = 0;
        if (i < 2) {
          if (rtIsNaNF(rtb_Selector6_0[i])) {
            exitg1 = 1;
          } else {
            i++;
          }
        } else {
          if (rtb_Selector6_0[1] < 0.0F) {
            rtb_Selector6_0[0] = rtb_Selector6_0[1];
            rtb_Selector6_0[1] = 0.0F;
            rtb_ModulatingPercentage = rtb_Inlets_h_idx_1;
            rtb_Inlets_h_idx_1 = 0.0F;
          }

          if ((!rtIsNaNF(rtb_Switch2)) && (!(rtb_Switch2 > rtb_Selector6_0[1])) &&
              (!(rtb_Switch2 < rtb_Selector6_0[0]))) {
            r = (rtb_Switch2 - rtb_Selector6_0[0]) / (rtb_Selector6_0[1] -
              rtb_Selector6_0[0]);
            if (r == 0.0F) {
              LowestPercentage = rtb_ModulatingPercentage;
            } else if (r == 1.0F) {
              LowestPercentage = rtb_Inlets_h_idx_1;
            } else if (rtb_ModulatingPercentage == rtb_Inlets_h_idx_1) {
              LowestPercentage = rtb_ModulatingPercentage;
            } else {
              LowestPercentage = (1.0F - r) * rtb_ModulatingPercentage + r *
                rtb_Inlets_h_idx_1;
            }
          }

          exitg1 = 1;
        }
      } while (exitg1 == 0);

      if (rtb_Switch2 < 0.1) {
        LowestPercentage = 0.0F;
      } else if (rtb_Switch2 > 99.9) {
        LowestPercentage =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
      }

      // MultiPortSwitch generated from: '<S34>/Multiport Switch' incorporates:
      //   Inport: '<Root>/ventilationParam'

      if (rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.ModulationType
          == 1) {
        // ForEachSliceAssignment generated from: '<S33>/ModOnTime' incorporates:
        //   MATLAB Function: '<S34>/MATLAB Function'

        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[ForEach_itr] =
          rtb_Selector6;

        // ForEachSliceAssignment generated from: '<S33>/TotalPeriod' incorporates:
        //   MATLAB Function: '<S34>/MATLAB Function'

        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[ForEach_itr] =
          rtb_TotalPeriod;
      } else {
        // ForEachSliceAssignment generated from: '<S33>/ModOnTime' incorporates:
        //   MATLAB Function: '<S34>/MATLAB Function1'

        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[ForEach_itr] =
          LowestPercentage;

        // ForEachSliceAssignment generated from: '<S33>/TotalPeriod' incorporates:
        //   MATLAB Function: '<S34>/MATLAB Function1'

        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[ForEach_itr] =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
      }

      // End of MultiPortSwitch generated from: '<S34>/Multiport Switch'
    }

    // End of Outputs for SubSystem: '<S32>/For Each Subsystem'

    // Chart: '<S13>/VarFansNoModulation' incorporates:
    //   BusCreator generated from: '<S13>/VarFansNoModulation'
    //   UnitDelay: '<S14>/Unit Delay1'

    if (rtDW.bitsForTID0.is_active_c22_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c22_fanscheduler_lib = 1U;
      if ((rtb_yVarFanCtrl == 0) && (rtb_yLinkedVarFanModulates == 1)) {
        rtDW.bitsForTID0.is_MainOnMappingChange =
          IN_SinglePreRunCycleVariableFansWithoutModulation;
        rtDW.yTriggerInletsOpen_n = 1;
      } else {
        rtDW.bitsForTID0.is_MainOnMappingChange = IN_WaitForStartCondition;
      }

      rtDW.CurrentOnOffState = 0.0;
      if ((rtb_yVarFanCtrl == 0) && (rtb_yLinkedVarFanModulates == 1)) {
        rtDW.bitsForTID0.is_WaitForInlets =
          IN_SinglePreRunCycleVariableFansWithoutModulation;
        rtDW.bitsForTID0.is_SinglePreRunCycleVariableFansWithoutModulation =
          IN_WaitForInletsToOpen;
        rtDW.CurrentOnOffState = 0.0;
      } else {
        rtDW.bitsForTID0.is_WaitForInlets = IN_WaitForStartCondition;
        rtDW.yTriggerInletsClose_p = 0;
      }

      i = 0;
      do {
        if (rtDW.UnitDelay8_DSTATE[i] > 0) {
          rtDW.yVariableFans_l[i] = rtb_VariableFans[i];
        } else {
          rtDW.yVariableFans_l[i] = rtb_VariableFans[i] * static_cast<real32_T>
            (rtDW.CurrentOnOffState);
        }

        i++;
      } while (i + 1 <= 8);
    } else {
      if (rtDW.bitsForTID0.is_MainOnMappingChange == 1) {
        rtDW.yTriggerInletsOpen_n = 0;
        rtDW.bitsForTID0.is_MainOnMappingChange = IN_WaitForStartCondition;

        // case IN_WaitForStartCondition:
      } else if ((rtb_yVarFanCtrl == 0) && (rtb_yLinkedVarFanModulates == 1)) {
        rtDW.bitsForTID0.is_MainOnMappingChange =
          IN_SinglePreRunCycleVariableFansWithoutModulation;
        rtDW.yTriggerInletsOpen_n = 1;
      } else {
        rtDW.bitsForTID0.is_MainOnMappingChange = IN_WaitForStartCondition;
      }

      if (rtDW.bitsForTID0.is_WaitForInlets == 1) {
        if (rtDW.bitsForTID0.is_SinglePreRunCycleVariableFansWithoutModulation ==
            1) {
          rtDW.bitsForTID0.is_SinglePreRunCycleVariableFansWithoutModulation =
            0U;
          rtDW.bitsForTID0.is_WaitForInlets = IN_WaitForStartCondition;
          rtDW.yTriggerInletsClose_p = 0;

          // case IN_WaitForInletsToOpen:
        } else if (rtDW.yInletsOutputStatus == 1) {
          rtDW.bitsForTID0.is_SinglePreRunCycleVariableFansWithoutModulation =
            IN_InletsAreNowOpen;
          rtDW.CurrentOnOffState = 1.0;
        } else {
          rtDW.CurrentOnOffState = 0.0;
        }

        // case IN_WaitForStartCondition:
      } else if ((rtb_yVarFanCtrl == 0) && (rtb_yLinkedVarFanModulates == 1)) {
        rtDW.bitsForTID0.is_WaitForInlets =
          IN_SinglePreRunCycleVariableFansWithoutModulation;
        rtDW.bitsForTID0.is_SinglePreRunCycleVariableFansWithoutModulation =
          IN_WaitForInletsToOpen;
        rtDW.CurrentOnOffState = 0.0;
      } else {
        rtDW.bitsForTID0.is_WaitForInlets = IN_WaitForStartCondition;
        rtDW.yTriggerInletsClose_p = 0;
      }

      i = 0;
      do {
        if (rtDW.UnitDelay8_DSTATE[i] > 0) {
          rtDW.yVariableFans_l[i] = rtb_VariableFans[i];
        } else {
          rtDW.yVariableFans_l[i] = rtb_VariableFans[i] * static_cast<real32_T>
            (rtDW.CurrentOnOffState);
        }

        i++;
      } while (i + 1 <= 8);
    }

    // End of Chart: '<S13>/VarFansNoModulation'

    // Chart: '<S13>/VarFansWithModulation' incorporates:
    //   BusCreator generated from: '<S13>/VarFansWithModulation'
    //   Inport: '<Root>/ventilationParam'
    //   Selector: '<S13>/Selector3'
    //   Selector: '<S13>/Selector4'
    //   UnitDelay: '<S14>/Unit Delay1'

    if (rtDW.bitsForTID0.is_active_c15_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c15_fanscheduler_lib = 1U;
      rtDW.bitsForTID0.is_MainModulationCycleTimer =
        IN_OnOffFanWaitForStartCondition;
      rtDW.CurrentModulationState = 0;
      rtDW.CurrentEnabledState = 0;
      rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets =
        IN_WaitForStartCondition;
    } else {
      if (rtDW.bitsForTID0.is_MainModulationCycleTimer == 1) {
        if (rtb_yVarFanCtrl != 1) {
          rtDW.bitsForTID0.is_MainModulationCycleTimer =
            IN_OnOffFanWaitForStartCondition;
        } else if (rtb_yLinkedVarFanModulates == 1) {
          rtDW.bitsForTID0.is_MainModulationCycleTimer =
            IN_MainTimerWithTriggerInlets;
          rtDW.yTriggerInletsOpen = 1;
          rtDW.CycleTime = 0.0F;
        } else if (rtDW.CycleTime >=
                   rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
                   - 1]) {
          rtDW.bitsForTID0.is_MainModulationCycleTimer =
            IN_OnOffFanWaitForStartCondition;
        } else {
          rtDW.yTriggerInletsOpen = 0;
          rtDW.CycleTime += static_cast<real32_T>(rtDW.Ts_j);
        }

        // case IN_OnOffFanWaitForStartCondition:
      } else if (rtb_yVarFanCtrl == 1) {
        rtDW.bitsForTID0.is_MainModulationCycleTimer =
          IN_MainTimerWithTriggerInlets;
        rtDW.yTriggerInletsOpen = 1;
        rtDW.CycleTime = 0.0F;
      }

      if (rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets == 1) {
        if (rtb_yVarFanCtrl != 1) {
          rtDW.bitsForTID0.is_FansAreFollowingInletState = 0U;
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets =
            IN_WaitForStartCondition;
        } else if (rtb_yLinkedVarFanModulates == 1) {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState =
            IN_WaitForInletsToOpenAfterLineChange;
          rtDW.CurrentModulationState = 0;
          rtDW.CurrentEnabledState = 0;
        } else {
          switch (rtDW.bitsForTID0.is_FansAreFollowingInletState) {
           case IN_ModulationOffTimer:
            if (rtDW.ModulationTime >=
                rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
                - 1]) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState = 0U;
              rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets =
                IN_WaitForStartCondition;
            } else {
              rtDW.yTriggerInletsClose = 0;
              rtDW.ModulationTime += static_cast<real32_T>(rtDW.Ts_j);
              rtDW.CurrentModulationState = 0;
              rtDW.CurrentEnabledState = 1;
            }
            break;

           case IN_ModulationOnTimer:
            if (rtDW.ModulationTime >=
                rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
                - 1]) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState =
                IN_ModulationOffTimer;
              rtDW.yTriggerInletsClose = 1;
            } else {
              rtDW.ModulationTime += static_cast<real32_T>(rtDW.Ts_j);
              rtDW.CurrentModulationState = 1;
              rtDW.CurrentEnabledState = 1;
            }
            break;

           case IN_WaitForInletsToOpenAfterLineChange:
            if (rtDW.yInletsOutputStatus == 1) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState =
                IN_ModulationOnTimer;
              rtDW.ModulationTime = 0.0F;
            } else {
              rtDW.CurrentModulationState = 0;
              rtDW.CurrentEnabledState = 0;
            }
            break;

           default:
            // case IN_WaitForInletsToOpenNormal:
            if (rtDW.yInletsOutputStatus == 1) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState =
                IN_ModulationOnTimer;
              rtDW.ModulationTime = 0.0F;
            } else {
              rtDW.CurrentModulationState = 0;
              rtDW.CurrentEnabledState = 0;
            }
            break;
          }
        }

        // case IN_WaitForStartCondition:
      } else if (rtb_yVarFanCtrl == 1) {
        if (rtb_yLinkedVarFanModulates == 0) {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState =
            IN_WaitForInletsToOpenNormal;
          rtDW.CurrentModulationState = 0;
          rtDW.CurrentEnabledState = 0;
        } else {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState =
            IN_WaitForInletsToOpenAfterLineChange;
          rtDW.CurrentModulationState = 0;
          rtDW.CurrentEnabledState = 0;
        }
      }

      if (rtb_VariableFans[0] <
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc)
      {
        rtDW.yVariableFans[0] =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc
          * static_cast<real32_T>(rtDW.CurrentModulationState);
      } else {
        rtDW.yVariableFans[0] = rtb_VariableFans[0] * static_cast<real32_T>
          (rtDW.CurrentEnabledState);
      }
    }

    // End of Chart: '<S13>/VarFansWithModulation'

    // BusCreator generated from: '<S13>/VarFansModulatingWithoutInletLink' incorporates:
    //   Inport: '<Root>/ventilationParam'

    rtb_Selector6 =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc;

    // Chart: '<S13>/VarFansModulatingWithoutInletLink'
    if (rtDW.bitsForTID0.is_active_c5_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c5_fanscheduler_lib = 1U;
      std::memset(&rtDW.OnTime[0], 0, sizeof(real_T) << 3U);
      std::memset(&rtDW.OffTime[0], 0, sizeof(real_T) << 3U);
    } else {
      i = 0;
      do {
        if (rtb_VariableFans[i] < rtb_Selector6) {
          if (rtDW.OnTime[i] <= rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[i])
          {
            rtDW.CurrentState[i] = rtb_Selector6;
            rtDW.OnTime[i] += rtDW.Ts_f;
          } else if (rtDW.OffTime[i] >
                     rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[i] -
                     rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[i]) {
            rtDW.CurrentState[i] = rtb_Selector6;
            rtDW.OnTime[i] = 0.0;
            rtDW.OffTime[i] = 0.0;
          } else {
            rtDW.CurrentState[i] = 0.0;
            rtDW.OffTime[i] += rtDW.Ts_f;
          }
        } else {
          rtDW.CurrentState[i] = 0.0;
        }

        i++;
      } while (i + 1 <= 8);

      i = 0;
      do {
        if (rtb_VariableFans[i] < rtb_Selector6) {
          if (rtb_yVarFanCtrl == 0) {
            rtDW.yVariableFans_j[i] = rtb_VariableFans[i];
          } else {
            rtDW.yVariableFans_j[i] = static_cast<real32_T>(rtDW.CurrentState[i]);
          }
        } else {
          rtDW.yVariableFans_j[i] = rtb_VariableFans[i];
        }

        i++;
      } while (i + 1 <= 8);
    }

    // End of Chart: '<S13>/VarFansModulatingWithoutInletLink'

    // MATLAB Function: '<S13>/MATLAB Function' incorporates:
    //   Inport: '<Root>/ventilationParam'

    for (i = 0; i < 8; i++) {
      rtY.ventilationOutput.fanSchedulerOutput.VariableFans[i] =
        rtDW.yVariableFans_j[i];
    }

    rtY.ventilationOutput.fanSchedulerOutput.VariableFans[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
      - 1] =
      rtDW.yVariableFans[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
      - 1];

    // MultiPortSwitch: '<S13>/Multiport Switch5'
    if (rtb_yVarFanCtrl == 0) {
      // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
      //   Outport: '<Root>/ventilationOutput'

      for (i = 0; i < 8; i++) {
        rtY.ventilationOutput.fanSchedulerOutput.VariableFans[i] =
          rtDW.yVariableFans_l[i];
      }
    }

    // End of MultiPortSwitch: '<S13>/Multiport Switch5'

    // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
    //   Constant: '<S6>/TypeofInletToControl'
    //   Inport: '<Root>/ventilationParam'
    //   Outport: '<Root>/ventilationOutput'
    //   Selector: '<S37>/Selector3'

    rtY.ventilationOutput.fanSchedulerOutput.Inlets[0] =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMaxOutput[
      0];

    // Switch: '<S9>/Switch2' incorporates:
    //   Inport: '<Root>/ventilationParam'

    if (rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OnOffModulation
        > 0) {
      std::memcpy(&rtb_Switch2_k[0], &rtb_OnOffFans[0], 20U * sizeof(int32_T));
    } else {
      for (i = 0; i < 20; i++) {
        // Saturate: '<S9>/Saturation'
        u0 = rtb_OnOffFans[i];
        if (u0 > 1) {
          rtb_Switch2_k[i] = 1;
        } else if (u0 < 0) {
          rtb_Switch2_k[i] = 0;
        } else {
          rtb_Switch2_k[i] = u0;
        }

        // End of Saturate: '<S9>/Saturation'
      }
    }

    // End of Switch: '<S9>/Switch2'

    // Switch: '<S9>/Switch' incorporates:
    //   Constant: '<S18>/Constant'
    //   Constant: '<S19>/Constant'
    //   Logic: '<S9>/AND'
    //   RelationalOperator: '<S18>/Compare'
    //   RelationalOperator: '<S19>/Compare'
    //   UnitDelay: '<S9>/Unit Delay4'
    //   UnitDelay: '<S9>/Unit Delay5'

    if (rtb_yLinkedVarFanModulates > 0) {
      for (i = 0; i < 20; i++) {
        rtDW.UnitDelay5_DSTATE[i] = ((rtb_Switch2_k[i] == 1) &&
          (rtDW.UnitDelay4_DSTATE[i] == 1));
      }
    }

    // End of Switch: '<S9>/Switch'

    // Switch generated from: '<S45>/Switch'
    if (rtDW.TunnelPhaseCommand >= 1) {
      rtb_ModulatingPercentage = rtDW.ModulatingPercentage;
    } else {
      rtb_ModulatingPercentage = rtDW.ModulatingPercentage_h;
    }

    // MATLAB Function: '<S25>/MATLAB Function' incorporates:
    //   Constant: '<S24>/Constant'
    //   Inport: '<Root>/ventilationParam'

    rtb_Switch2 = rtb_ModulatingPercentage;
    if ((rtb_ModulatingPercentage < 1.0F) && (rtb_ModulatingPercentage > 0.0F))
    {
      rtb_Switch2 = 1.0F;
    }

    if ((rtb_Switch2 > 99.5F) && (rtb_Switch2 < 100.0F)) {
      rtb_Switch2 = 100.0F;
    }

    if ((rtb_Switch2 < 100.0F - rtb_Switch2) || rtIsNaNF(100.0F - rtb_Switch2))
    {
      LowestPercentage = rtb_Switch2;
    } else {
      LowestPercentage = 100.0F - rtb_Switch2;
    }

    rtb_TotalPeriod =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.OptOnTime *
      100.0F / LowestPercentage;
    if (rtb_TotalPeriod >
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod) {
      rtb_TotalPeriod =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
    }

    rtb_Selector6 = (rtNaNF);
    if ((!rtIsNaNF(rtb_Switch2)) && (!(rtb_Switch2 > 100.0F)) && (!(rtb_Switch2 <
          0.0F))) {
      r = rtb_Switch2 / 100.0F;
      if (r == 0.0F) {
        rtb_Selector6 = 0.0F;
      } else if (r == 1.0F) {
        rtb_Selector6 = rtb_TotalPeriod;
      } else if (0.0F == rtb_TotalPeriod) {
        rtb_Selector6 = 0.0F;
      } else {
        rtb_Selector6 = (1.0F - r) * 0.0F + r * rtb_TotalPeriod;
      }
    }

    if (rtb_Selector6 <
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOnTime) {
      rtb_Selector6 =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOnTime;
      rtb_TotalPeriod =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOnTime *
        100.0F / LowestPercentage;
    }

    if (rtb_TotalPeriod - rtb_Selector6 <
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOffTime) {
      rtb_TotalPeriod =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOffTime *
        100.0F / LowestPercentage;
      rtb_Selector6 = rtb_TotalPeriod -
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinOffTime;
    }

    if (rtb_Switch2 < 0.1) {
      rtb_Selector6 = 0.0F;
    } else if (rtb_Switch2 > 99.9) {
      rtb_Selector6 = rtb_TotalPeriod;
    }

    // MATLAB Function: '<S25>/MATLAB Function1' incorporates:
    //   Inport: '<Root>/ventilationParam'

    if ((rtb_ModulatingPercentage < 1.0F) && (rtb_ModulatingPercentage > 0.0F))
    {
      rtb_ModulatingPercentage = 1.0F;
    }

    if (rtb_ModulatingPercentage > 99.5F) {
      rtb_ModulatingPercentage = 100.0F;
    }

    rtb_Switch2 = (rtNaNF);
    if ((!rtIsNaNF(rtb_ModulatingPercentage)) && (!(rtb_ModulatingPercentage <
          0.0F))) {
      r = rtb_ModulatingPercentage / 100.0F;
      if (r == 0.0F) {
        rtb_Switch2 = 0.0F;
      } else if (r == 1.0F) {
        rtb_Switch2 =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
      } else if (0.0F ==
                 rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod)
      {
        rtb_Switch2 = 0.0F;
      } else {
        rtb_Switch2 = (1.0F - r) * 0.0F + r *
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
      }
    }

    if (rtb_ModulatingPercentage < 0.1) {
      rtb_Switch2 = 0.0F;
    } else if (rtb_ModulatingPercentage > 99.9) {
      rtb_Switch2 =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
    }

    // MultiPortSwitch generated from: '<S25>/Multiport Switch' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   MATLAB Function: '<S25>/MATLAB Function'
    //   MATLAB Function: '<S25>/MATLAB Function1'

    if (rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.ModulationType
        == 1) {
      rtb_Switch2 = rtb_Selector6;
    } else {
      rtb_TotalPeriod =
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MaxPeriod;
    }

    // End of MultiPortSwitch generated from: '<S25>/Multiport Switch'

    // Sum: '<S11>/Sum'
    rtb_Selector6 = rtb_TotalPeriod - rtb_Switch2;

    // Switch: '<S11>/Switch2' incorporates:
    //   Saturate: '<S11>/Saturation'

    if (rtb_yAtLeastOneOnOffFanModulates <= 0) {
      for (i = 0; i < 20; i++) {
        u0 = rtb_OnOffFans[i];

        // Saturate: '<S11>/Saturation'
        if (u0 > 1) {
          u0 = 1;
        } else if (u0 < 0) {
          u0 = 0;
        }

        rtb_OnOffFans[i] = u0;
      }
    }

    // End of Switch: '<S11>/Switch2'

    // Chart: '<S10>/OnOffFansNoModulation' incorporates:
    //   BusCreator generated from: '<S10>/OnOffFansNoModulation'
    //   UnitDelay: '<S11>/Unit Delay4'

    if (rtDW.bitsForTID0.is_active_c11_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c11_fanscheduler_lib = 1U;
      if ((rtb_yAtLeastOneOnOffFanModulates == 0) && (rtb_yLinkedVarFanModulates
           == 1)) {
        rtDW.bitsForTID0.is_MainOnMappingChange_j =
          IN_SinglePreRunCycleOnOffFansWithoutModulation;
        rtDW.yTriggerInletsOpen_a = 1;
      } else {
        rtDW.bitsForTID0.is_MainOnMappingChange_j = IN_WaitForStartCondition;
      }

      rtDW.CurrentModulationState_g = 0;
      rtDW.CurrentOnOffState_l = 0;
      if ((rtb_yAtLeastOneOnOffFanModulates == 0) && (rtb_yLinkedVarFanModulates
           == 1)) {
        rtDW.bitsForTID0.is_WaitForInlets_j =
          IN_SinglePreRunCycleOnOffFansWithoutModulation;
        rtDW.bitsForTID0.is_SinglePreRunCycleOnOffFansWithoutModulation =
          IN_WaitForInletsToOpen;
        rtDW.CurrentModulationState_g = 0;
        rtDW.CurrentOnOffState_l = 0;
      } else {
        rtDW.bitsForTID0.is_WaitForInlets_j = IN_WaitForStartCondition;
        rtDW.yTriggerInletsClose_d = 0;
      }

      i = 0;
      do {
        if (rtDW.UnitDelay5_DSTATE[i] == 1) {
          rtDW.yOnOffFans_o[i] = 1;
        } else if (rtb_OnOffFans[i] == 2) {
          if (rtb_yAtLeastOneOnOffFanModulates != 1) {
            tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
              rtDW.CurrentOnOffState_l;
            if (tmp > 2147483647L) {
              tmp = 2147483647L;
            } else if (tmp < -2147483648L) {
              tmp = -2147483648L;
            }

            rtDW.yOnOffFans_o[i] = static_cast<int32_T>(tmp);
          } else {
            rtDW.yOnOffFans_o[i] = rtDW.CurrentModulationState_g;
          }
        } else {
          tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
            rtDW.CurrentOnOffState_l;
          if (tmp > 2147483647L) {
            tmp = 2147483647L;
          } else if (tmp < -2147483648L) {
            tmp = -2147483648L;
          }

          rtDW.yOnOffFans_o[i] = static_cast<int32_T>(tmp);
        }

        i++;
      } while (i + 1 <= 20);
    } else {
      if (rtDW.bitsForTID0.is_MainOnMappingChange_j == 1) {
        rtDW.yTriggerInletsOpen_a = 0;
        rtDW.bitsForTID0.is_MainOnMappingChange_j = IN_WaitForStartCondition;

        // case IN_WaitForStartCondition:
      } else if ((rtb_yAtLeastOneOnOffFanModulates == 0) &&
                 (rtb_yLinkedVarFanModulates == 1)) {
        rtDW.bitsForTID0.is_MainOnMappingChange_j =
          IN_SinglePreRunCycleOnOffFansWithoutModulation;
        rtDW.yTriggerInletsOpen_a = 1;
      } else {
        rtDW.bitsForTID0.is_MainOnMappingChange_j = IN_WaitForStartCondition;
      }

      if (rtDW.bitsForTID0.is_WaitForInlets_j == 1) {
        if (rtDW.bitsForTID0.is_SinglePreRunCycleOnOffFansWithoutModulation == 1)
        {
          rtDW.bitsForTID0.is_SinglePreRunCycleOnOffFansWithoutModulation = 0U;
          rtDW.bitsForTID0.is_WaitForInlets_j = IN_WaitForStartCondition;
          rtDW.yTriggerInletsClose_d = 0;

          // case IN_WaitForInletsToOpen:
        } else if (rtDW.UnitDelay4_DSTATE_i == 1) {
          rtDW.bitsForTID0.is_SinglePreRunCycleOnOffFansWithoutModulation =
            IN_InletsAreNowOpen;
          rtDW.CurrentOnOffState_l = 1;
        } else {
          rtDW.CurrentModulationState_g = 0;
          rtDW.CurrentOnOffState_l = 0;
        }

        // case IN_WaitForStartCondition:
      } else if ((rtb_yAtLeastOneOnOffFanModulates == 0) &&
                 (rtb_yLinkedVarFanModulates == 1)) {
        rtDW.bitsForTID0.is_WaitForInlets_j =
          IN_SinglePreRunCycleOnOffFansWithoutModulation;
        rtDW.bitsForTID0.is_SinglePreRunCycleOnOffFansWithoutModulation =
          IN_WaitForInletsToOpen;
        rtDW.CurrentModulationState_g = 0;
        rtDW.CurrentOnOffState_l = 0;
      } else {
        rtDW.bitsForTID0.is_WaitForInlets_j = IN_WaitForStartCondition;
        rtDW.yTriggerInletsClose_d = 0;
      }

      i = 0;
      do {
        if (rtDW.UnitDelay5_DSTATE[i] == 1) {
          rtDW.yOnOffFans_o[i] = 1;
        } else if (rtb_OnOffFans[i] == 2) {
          if (rtb_yAtLeastOneOnOffFanModulates != 1) {
            tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
              rtDW.CurrentOnOffState_l;
            if (tmp > 2147483647L) {
              tmp = 2147483647L;
            } else if (tmp < -2147483648L) {
              tmp = -2147483648L;
            }

            rtDW.yOnOffFans_o[i] = static_cast<int32_T>(tmp);
          } else {
            rtDW.yOnOffFans_o[i] = rtDW.CurrentModulationState_g;
          }
        } else {
          tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
            rtDW.CurrentOnOffState_l;
          if (tmp > 2147483647L) {
            tmp = 2147483647L;
          } else if (tmp < -2147483648L) {
            tmp = -2147483648L;
          }

          rtDW.yOnOffFans_o[i] = static_cast<int32_T>(tmp);
        }

        i++;
      } while (i + 1 <= 20);
    }

    // End of Chart: '<S10>/OnOffFansNoModulation'

    // Chart: '<S10>/OnOffFansWithModulation' incorporates:
    //   BusCreator generated from: '<S10>/OnOffFansWithModulation'
    //   UnitDelay: '<S11>/Unit Delay4'

    if (rtDW.bitsForTID0.is_active_c12_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c12_fanscheduler_lib = 1U;
      if (rtb_yAtLeastOneOnOffFanModulates == 1) {
        rtDW.bitsForTID0.is_MainModulationCycleTimer_f =
          IN_MainTimerWithTriggerInlets;
        rtDW.bitsForTID0.is_MainTimerWithTriggerInlets =
          IN_OnMainModulationTimer;
        rtDW.yTriggerInletsOpen_j = 1;
        rtDW.TotalCycleOnTime = 0.0F;
      } else {
        rtDW.bitsForTID0.is_MainModulationCycleTimer_f =
          IN_WaitForStartCondition;
      }

      rtDW.CurrentModulationState_o = 0;
      rtDW.CurrentOnOffState_h = 0;
      if (rtb_yAtLeastOneOnOffFanModulates == 1) {
        if (rtb_yLinkedVarFanModulates == 0) {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
            IN_WaitForInletsToOpenNormal;
        } else {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
            IN_WaitForInletsToOpenAfterLineChange;
          rtDW.CurrentModulationState_o = 0;
          rtDW.CurrentOnOffState_h = 0;
        }
      } else {
        rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
          IN_WaitForStartCondition;
      }

      i = 0;
      do {
        if (rtDW.UnitDelay5_DSTATE[i] == 1) {
          rtDW.yOnOffFans[i] = 1;
        } else if (rtb_OnOffFans[i] == 2) {
          if (rtb_yAtLeastOneOnOffFanModulates != 1) {
            tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
              rtDW.CurrentOnOffState_h;
            if (tmp > 2147483647L) {
              tmp = 2147483647L;
            } else if (tmp < -2147483648L) {
              tmp = -2147483648L;
            }

            rtDW.yOnOffFans[i] = static_cast<int32_T>(tmp);
          } else {
            rtDW.yOnOffFans[i] = rtDW.CurrentModulationState_o;
          }
        } else {
          tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
            rtDW.CurrentOnOffState_h;
          if (tmp > 2147483647L) {
            tmp = 2147483647L;
          } else if (tmp < -2147483648L) {
            tmp = -2147483648L;
          }

          rtDW.yOnOffFans[i] = static_cast<int32_T>(tmp);
        }

        i++;
      } while (i + 1 <= 20);
    } else {
      if (rtDW.bitsForTID0.is_MainModulationCycleTimer_f == 1) {
        if (rtb_yAtLeastOneOnOffFanModulates != 1) {
          rtDW.bitsForTID0.is_MainTimerWithTriggerInlets = 0U;
          rtDW.bitsForTID0.is_MainModulationCycleTimer_f =
            IN_WaitForStartCondition;
        } else if (rtb_yLinkedVarFanModulates == 1) {
          rtDW.bitsForTID0.is_MainTimerWithTriggerInlets =
            IN_OnMainModulationTimer;
          rtDW.yTriggerInletsOpen_j = 1;
          rtDW.TotalCycleOnTime = 0.0F;
        } else if (rtDW.bitsForTID0.is_MainTimerWithTriggerInlets == 1) {
          if (rtDW.TotalCycleOffTime >= rtb_Selector6) {
            rtDW.bitsForTID0.is_MainTimerWithTriggerInlets = 0U;
            rtDW.bitsForTID0.is_MainModulationCycleTimer_f =
              IN_WaitForStartCondition;
          } else {
            rtDW.TotalCycleOffTime += static_cast<real32_T>(rtDW.Ts_b);
          }

          // case IN_OnMainModulationTimer:
        } else if (rtDW.TotalCycleOnTime >= rtb_Switch2) {
          rtDW.bitsForTID0.is_MainTimerWithTriggerInlets =
            IN_OffMainModulationTimer;
          rtDW.TotalCycleOffTime = 0.0F;
        } else {
          rtDW.yTriggerInletsOpen_j = 0;
          rtDW.TotalCycleOnTime += static_cast<real32_T>(rtDW.Ts_b);
        }

        // case IN_WaitForStartCondition:
      } else if (rtb_yAtLeastOneOnOffFanModulates == 1) {
        rtDW.bitsForTID0.is_MainModulationCycleTimer_f =
          IN_MainTimerWithTriggerInlets;
        rtDW.bitsForTID0.is_MainTimerWithTriggerInlets =
          IN_OnMainModulationTimer;
        rtDW.yTriggerInletsOpen_j = 1;
        rtDW.TotalCycleOnTime = 0.0F;
      } else {
        rtDW.bitsForTID0.is_MainModulationCycleTimer_f =
          IN_WaitForStartCondition;
      }

      if (rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b == 1) {
        if (rtb_yAtLeastOneOnOffFanModulates != 1) {
          rtDW.bitsForTID0.is_FansAreFollowingInletState_f = 0U;
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
            IN_WaitForStartCondition;
        } else if (rtb_yLinkedVarFanModulates == 1) {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
            IN_WaitForInletsToOpenAfterLineChange;
          rtDW.CurrentModulationState_o = 0;
          rtDW.CurrentOnOffState_h = 0;
        } else {
          switch (rtDW.bitsForTID0.is_FansAreFollowingInletState_f) {
           case IN_ModulationOffTimer:
            if (rtDW.ModulationOffTime >= rtb_Selector6) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState_f = 0U;
              rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
                IN_WaitForStartCondition;
            } else {
              rtDW.ModulationOffTime += static_cast<real32_T>(rtDW.Ts_b);
              rtDW.yTriggerInletsClose_k = 0;
              rtDW.CurrentModulationState_o = 0;
              rtDW.CurrentOnOffState_h = 1;
            }
            break;

           case IN_ModulationOnTimer:
            if (rtDW.ModulationOnTime >= rtb_Switch2) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
                IN_ModulationOffTimer;
              rtDW.ModulationOffTime = 0.0F;
              rtDW.yTriggerInletsClose_k = 1;
            } else {
              rtDW.ModulationOnTime += static_cast<real32_T>(rtDW.Ts_b);
              rtDW.CurrentModulationState_o = 1;
              rtDW.CurrentOnOffState_h = 1;
            }
            break;

           case IN_WaitForInletsToOpenAfterLineChange:
            if (rtDW.UnitDelay4_DSTATE_i == 1) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
                IN_ModulationOnTimer;
              rtDW.ModulationOnTime = 0.0F;
            } else {
              rtDW.CurrentModulationState_o = 0;
              rtDW.CurrentOnOffState_h = 0;
            }
            break;

           default:
            // case IN_WaitForInletsToOpenNormal:
            if (rtDW.UnitDelay4_DSTATE_i == 1) {
              rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
                IN_ModulationOnTimer;
              rtDW.ModulationOnTime = 0.0F;
            }
            break;
          }
        }

        // case IN_WaitForStartCondition:
      } else if (rtb_yAtLeastOneOnOffFanModulates == 1) {
        if (rtb_yLinkedVarFanModulates == 0) {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
            IN_WaitForInletsToOpenNormal;
        } else {
          rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
            IN_FansAreFollowingInletState;
          rtDW.bitsForTID0.is_FansAreFollowingInletState_f =
            IN_WaitForInletsToOpenAfterLineChange;
          rtDW.CurrentModulationState_o = 0;
          rtDW.CurrentOnOffState_h = 0;
        }
      } else {
        rtDW.bitsForTID0.is_ModulationTimerWithWaitForInlets_b =
          IN_WaitForStartCondition;
      }

      i = 0;
      do {
        if (rtDW.UnitDelay5_DSTATE[i] == 1) {
          rtDW.yOnOffFans[i] = 1;
        } else if (rtb_OnOffFans[i] == 2) {
          if (rtb_yAtLeastOneOnOffFanModulates != 1) {
            tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
              rtDW.CurrentOnOffState_h;
            if (tmp > 2147483647L) {
              tmp = 2147483647L;
            } else if (tmp < -2147483648L) {
              tmp = -2147483648L;
            }

            rtDW.yOnOffFans[i] = static_cast<int32_T>(tmp);
          } else {
            rtDW.yOnOffFans[i] = rtDW.CurrentModulationState_o;
          }
        } else {
          tmp = static_cast<int64_T>(rtb_OnOffFans[i]) *
            rtDW.CurrentOnOffState_h;
          if (tmp > 2147483647L) {
            tmp = 2147483647L;
          } else if (tmp < -2147483648L) {
            tmp = -2147483648L;
          }

          rtDW.yOnOffFans[i] = static_cast<int32_T>(tmp);
        }

        i++;
      } while (i + 1 <= 20);
    }

    // End of Chart: '<S10>/OnOffFansWithModulation'

    // MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   MultiPortSwitch: '<S13>/Multiport Switch3'

    if (rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.LinkedInletsType
        == 0) {
      // MultiPortSwitch: '<S10>/Multiport Switch2'
      if (rtb_yAtLeastOneOnOffFanModulates == 0) {
        // MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:
        //   BusCreator: '<S10>/Bus Creator1'
        //   Constant: '<S10>/Constant'

        i = rtDW.yTriggerInletsOpen_a;
        u0 = rtDW.yTriggerInletsClose_d;
        rtb_yVarFanCtrl = 0;
      } else {
        // MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:
        //   BusCreator: '<S10>/Bus Creator2'
        //   Constant: '<S10>/Constant1'

        i = rtDW.yTriggerInletsOpen_j;
        u0 = rtDW.yTriggerInletsClose_k;
        rtb_yVarFanCtrl = 1;
      }

      // End of MultiPortSwitch: '<S10>/Multiport Switch2'
    } else if (rtb_yVarFanCtrl == 0) {
      // MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:
      //   BusCreator: '<S13>/Bus Creator1'
      //   Constant: '<S13>/Constant'
      //   MultiPortSwitch: '<S13>/Multiport Switch3'

      i = rtDW.yTriggerInletsOpen_n;
      u0 = rtDW.yTriggerInletsClose_p;
      rtb_yVarFanCtrl = 2;
    } else {
      // MultiPortSwitch: '<S12>/Multiport Switch1' incorporates:
      //   BusCreator: '<S13>/Bus Creator2'
      //   Constant: '<S13>/Constant1'
      //   MultiPortSwitch: '<S13>/Multiport Switch3'

      i = rtDW.yTriggerInletsOpen;
      u0 = rtDW.yTriggerInletsClose;
      rtb_yVarFanCtrl = 3;
    }

    // End of MultiPortSwitch: '<S12>/Multiport Switch1'

    // Chart: '<S6>/InletsModulation' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   MultiPortSwitch: '<S12>/Multiport Switch1'

    if (rtDW.bitsForTID0.is_active_c4_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c4_fanscheduler_lib = 1U;
      rtDW.yInletsOutputCmd = 0;
      rtDW.yInletsOutputStatus = 0;
      if (i == 1) {
        if (rtDW.yInletsOutputCmd == 0) {
          rtDW.bitsForTID0.is_InletsMainStateMachine =
            IN_DetectMappingLineChange;
          rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreOpening;
          rtDW.OpenTimer = 0.0F;
          rtDW.yInletsOutputCmd = 1;
        } else {
          rtDW.bitsForTID0.is_InletsMainStateMachine =
            IN_DetectMappingLineChange;
          rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAlreadyOpen;
          rtDW.OpenTimer = 0.0F;
        }
      } else {
        rtDW.bitsForTID0.is_InletsMainStateMachine = IN_WaitForTrigger;
      }
    } else if (rtDW.bitsForTID0.is_InletsMainStateMachine == 1) {
      if (rtb_yLinkedVarFanModulates == 1) {
        rtDW.yInletsOutputStatus = 0;
        if (rtDW.yInletsOutputCmd == 0) {
          rtDW.bitsForTID0.is_InletsMainStateMachine =
            IN_DetectMappingLineChange;
          rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreOpening;
          rtDW.OpenTimer = 0.0F;
          rtDW.yInletsOutputCmd = 1;
        } else {
          rtDW.bitsForTID0.is_InletsMainStateMachine =
            IN_DetectMappingLineChange;
          rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAlreadyOpen;
          rtDW.OpenTimer = 0.0F;
        }
      } else {
        switch (rtDW.bitsForTID0.is_DetectMappingLineChange) {
         case IN_InletsAlreadyOpen:
          if (rtDW.OpenTimer >=
              rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsPreRunTimer)
          {
            rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreOpen;
            rtDW.yInletsOutputCmd = 1;
            rtDW.yInletsOutputStatus = 1;
          } else {
            rtDW.OpenTimer += static_cast<real32_T>(rtDW.Ts_k);
            rtDW.yInletsOutputCmd = 1;
          }
          break;

         case IN_InletsAreClosed:
          rtDW.bitsForTID0.is_DetectMappingLineChange = 0U;
          rtDW.bitsForTID0.is_InletsMainStateMachine = IN_WaitForTrigger;
          break;

         case IN_InletsAreClosing:
          if (rtDW.CloseTimer >=
              rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsPreRunTimer)
          {
            rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreClosed;
            rtDW.yInletsOutputCmd = 0;
            rtDW.yInletsOutputStatus = 0;
          } else {
            rtDW.CloseTimer += static_cast<real32_T>(rtDW.Ts_k);
          }
          break;

         case IN_InletsAreOpen:
          // MultiPortSwitch: '<S12>/Multiport Switch' incorporates:
          //   Constant: '<S12>/Constant2'
          //   Sum: '<S5>/Sum'

          if (rtb_yAtLeastOneOnOffFanModulates == 0) {
            rtb_Selector6 = 9999.0F;
          } else {
            rtb_Selector6 = rtb_TotalPeriod - rtb_Switch2;
          }

          // End of MultiPortSwitch: '<S12>/Multiport Switch'
          if ((u0 == 1) && (2.0F *
                            rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsPreRunTimer
                            < rtb_Selector6)) {
            rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreClosing;
            rtDW.CloseTimer = 0.0F;
            rtDW.yInletsOutputCmd = 0;
          } else {
            rtDW.yInletsOutputCmd = 1;
            rtDW.yInletsOutputStatus = 1;
          }
          break;

         default:
          // case IN_InletsAreOpening:
          if (rtDW.OpenTimer >=
              rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsPreRunTimer)
          {
            rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreOpen;
            rtDW.yInletsOutputCmd = 1;
            rtDW.yInletsOutputStatus = 1;
          } else {
            rtDW.OpenTimer += static_cast<real32_T>(rtDW.Ts_k);
          }
          break;
        }
      }

      // case IN_WaitForTrigger:
    } else if (i == 1) {
      if (rtDW.yInletsOutputCmd == 0) {
        rtDW.bitsForTID0.is_InletsMainStateMachine = IN_DetectMappingLineChange;
        rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAreOpening;
        rtDW.OpenTimer = 0.0F;
        rtDW.yInletsOutputCmd = 1;
      } else {
        rtDW.bitsForTID0.is_InletsMainStateMachine = IN_DetectMappingLineChange;
        rtDW.bitsForTID0.is_DetectMappingLineChange = IN_InletsAlreadyOpen;
        rtDW.OpenTimer = 0.0F;
      }
    }

    // End of Chart: '<S6>/InletsModulation'

    // Switch generated from: '<S45>/Switch'
    if (rtDW.TunnelPhaseCommand >= 1) {
      rtb_InletsLow_idx_0 = rtDW.InletsLow[0];
      rtb_Inlets_h_idx_0 = rtDW.InletsHigh[0];
      rtb_Selector6 = rtDW.Inlets[0];
      rtb_ModulatingPercentage = rtDW.InletsLow[1];
      rtb_Inlets_h_idx_1 = rtDW.InletsHigh[1];
      r = rtDW.Inlets[1];
      rtb_Switch2 = rtDW.InletsLow[2];
      LowestPercentage = rtDW.InletsHigh[2];
      rtb_TotalPeriod = rtDW.Inlets[2];
    } else {
      rtb_InletsLow_idx_0 = rtDW.InletsLow_a[0];
      rtb_Inlets_h_idx_0 = rtDW.InletsHigh_d[0];
      rtb_Selector6 = rtDW.Inlets_h[0];
      rtb_ModulatingPercentage = rtDW.InletsLow_a[1];
      rtb_Inlets_h_idx_1 = rtDW.InletsHigh_d[1];
      r = rtDW.Inlets_h[1];
      rtb_Switch2 = rtDW.InletsLow_a[2];
      LowestPercentage = rtDW.InletsHigh_d[2];
      rtb_TotalPeriod = rtDW.Inlets_h[2];
    }

    // Switch generated from: '<S45>/Switch'
    for (i = 0; i < 8; i++) {
      if (rtDW.TunnelPhaseCommand >= 1) {
        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[i] =
          rtDW.VariableFansLow[i];
        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[i] =
          rtDW.VariableFansHigh[i];
      } else {
        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[i] =
          rtDW.VariableFansLow_o[i];
        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[i] =
          rtDW.VariableFansHigh_m[i];
      }
    }

    // MultiPortSwitch: '<S37>/Multiport Switch6' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Lookup_n-D: '<S37>/1-D Lookup Table'
    //   Lookup_n-D: '<S37>/1-D Lookup Table2'
    //   MultiPortSwitch: '<S12>/Multiport Switch1'
    //   Product: '<S37>/Product1'

    switch (rtb_yVarFanCtrl) {
     case 0:
      // SignalConversion generated from: '<S37>/1-D Lookup Table' incorporates:
      //   Selector: '<S37>/Selector1'
      //   Selector: '<S37>/Selector2'

      rtb_InletsLow_0[0] = rtb_InletsLow_idx_0;
      rtb_InletsLow_0[1] = rtb_Inlets_h_idx_0;
      rtb_Selector6 = static_cast<real32_T>(look1_is32lftfIs32_binlca
        (rtDW.yInletsOutputCmd, rtConstP.pooled13, rtb_InletsLow_0, 1U));
      break;

     case 1:
      // SignalConversion generated from: '<S37>/1-D Lookup Table' incorporates:
      //   Selector: '<S37>/Selector1'
      //   Selector: '<S37>/Selector2'

      rtb_InletsLow_0[0] = rtb_InletsLow_idx_0;
      rtb_InletsLow_0[1] = rtb_Inlets_h_idx_0;
      rtb_Selector6 = static_cast<real32_T>(look1_is32lftfIs32_binlca
        (rtDW.yInletsOutputCmd, rtConstP.pooled13, rtb_InletsLow_0, 1U));
      break;

     case 2:
      break;

     default:
      // SignalConversion generated from: '<S37>/1-D Lookup Table2' incorporates:
      //   Inport: '<Root>/ventilationParam'
      //   MATLAB Function: '<S13>/MATLAB Function'
      //   Selector: '<S37>/Selector8'
      //   Selector: '<S37>/Selector9'

      rtb_Selector6_0[0] =
        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];
      rtb_Selector6_0[1] =
        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];

      // SignalConversion generated from: '<S37>/1-D Lookup Table' incorporates:
      //   Selector: '<S37>/Selector1'
      //   Selector: '<S37>/Selector2'

      rtb_InletsLow_0[0] = rtb_InletsLow_idx_0;
      rtb_InletsLow_0[1] = rtb_Inlets_h_idx_0;
      rtb_Selector6 = look1_iflf_binlca(static_cast<real32_T>
        (rtDW.yInletsOutputCmd) *
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc,
        rtb_Selector6_0, rtb_InletsLow_0, 1U);
      break;
    }

    // End of MultiPortSwitch: '<S37>/Multiport Switch6'

    // Sum: '<S37>/Sum' incorporates:
    //   Constant: '<S6>/TypeofInletToControl'
    //   Inport: '<Root>/ventilationParam'
    //   Selector: '<S37>/Selector6'

    rtb_Selector6 +=
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletOffset[0];

    // Switch: '<S41>/Switch2' incorporates:
    //   Constant: '<S6>/TypeofInletToControl'
    //   Inport: '<Root>/ventilationParam'
    //   RelationalOperator: '<S41>/LowerRelop1'
    //   Selector: '<S37>/Selector3'

    if (!(rtb_Selector6 >
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMaxOutput
          [0])) {
      // Switch: '<S41>/Switch' incorporates:
      //   RelationalOperator: '<S41>/UpperRelop'
      //   Selector: '<S37>/Selector4'

      if (rtb_Selector6 <
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMinOutput
          [0]) {
        // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
        //   Outport: '<Root>/ventilationOutput'

        rtY.ventilationOutput.fanSchedulerOutput.Inlets[0] =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMinOutput
          [0];
      } else {
        // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
        //   Outport: '<Root>/ventilationOutput'

        rtY.ventilationOutput.fanSchedulerOutput.Inlets[0] = rtb_Selector6;
      }

      // End of Switch: '<S41>/Switch'
    }

    // End of Switch: '<S41>/Switch2'

    // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Outport: '<Root>/ventilationOutput'
    //   Selector: '<S38>/Selector3'

    rtY.ventilationOutput.fanSchedulerOutput.Inlets[1] =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMaxOutput[
      1];

    // MultiPortSwitch: '<S38>/Multiport Switch6' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Lookup_n-D: '<S38>/1-D Lookup Table'
    //   Lookup_n-D: '<S38>/1-D Lookup Table2'
    //   MultiPortSwitch: '<S12>/Multiport Switch1'
    //   Product: '<S38>/Product1'

    switch (rtb_yVarFanCtrl) {
     case 0:
      // SignalConversion generated from: '<S38>/1-D Lookup Table' incorporates:
      //   Selector: '<S38>/Selector1'
      //   Selector: '<S38>/Selector2'

      rtb_InletsLow_0[0] = rtb_ModulatingPercentage;
      rtb_InletsLow_0[1] = rtb_Inlets_h_idx_1;
      r = static_cast<real32_T>(look1_is32lftfIs32_binlca(rtDW.yInletsOutputCmd,
        rtConstP.pooled13, rtb_InletsLow_0, 1U));
      break;

     case 1:
      // SignalConversion generated from: '<S38>/1-D Lookup Table' incorporates:
      //   Selector: '<S38>/Selector1'
      //   Selector: '<S38>/Selector2'

      rtb_InletsLow_0[0] = rtb_ModulatingPercentage;
      rtb_InletsLow_0[1] = rtb_Inlets_h_idx_1;
      r = static_cast<real32_T>(look1_is32lftfIs32_binlca(rtDW.yInletsOutputCmd,
        rtConstP.pooled13, rtb_InletsLow_0, 1U));
      break;

     case 2:
      break;

     default:
      // SignalConversion generated from: '<S38>/1-D Lookup Table2' incorporates:
      //   Inport: '<Root>/ventilationParam'
      //   MATLAB Function: '<S13>/MATLAB Function'
      //   Selector: '<S38>/Selector8'
      //   Selector: '<S38>/Selector9'

      rtb_Selector6_0[0] =
        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];
      rtb_Selector6_0[1] =
        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];

      // SignalConversion generated from: '<S38>/1-D Lookup Table' incorporates:
      //   Selector: '<S38>/Selector1'
      //   Selector: '<S38>/Selector2'

      rtb_InletsLow_0[0] = rtb_ModulatingPercentage;
      rtb_InletsLow_0[1] = rtb_Inlets_h_idx_1;
      r = look1_iflf_binlca(static_cast<real32_T>(rtDW.yInletsOutputCmd) *
                            rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc,
                            rtb_Selector6_0, rtb_InletsLow_0, 1U);
      break;
    }

    // End of MultiPortSwitch: '<S38>/Multiport Switch6'

    // Sum: '<S38>/Sum' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Selector: '<S38>/Selector6'

    rtb_Selector6 =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletOffset[1]
      + r;

    // Switch: '<S42>/Switch2' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   RelationalOperator: '<S42>/LowerRelop1'
    //   Selector: '<S38>/Selector3'

    if (!(rtb_Selector6 >
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMaxOutput
          [1])) {
      // Switch: '<S42>/Switch' incorporates:
      //   RelationalOperator: '<S42>/UpperRelop'
      //   Selector: '<S38>/Selector4'

      if (rtb_Selector6 <
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMinOutput
          [1]) {
        // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
        //   Outport: '<Root>/ventilationOutput'

        rtY.ventilationOutput.fanSchedulerOutput.Inlets[1] =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMinOutput
          [1];
      } else {
        // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
        //   Outport: '<Root>/ventilationOutput'

        rtY.ventilationOutput.fanSchedulerOutput.Inlets[1] = rtb_Selector6;
      }

      // End of Switch: '<S42>/Switch'
    }

    // End of Switch: '<S42>/Switch2'

    // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Outport: '<Root>/ventilationOutput'
    //   Selector: '<S39>/Selector3'

    rtY.ventilationOutput.fanSchedulerOutput.Inlets[2] =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMaxOutput[
      2];

    // MultiPortSwitch: '<S39>/Multiport Switch6' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Lookup_n-D: '<S39>/1-D Lookup Table'
    //   Lookup_n-D: '<S39>/1-D Lookup Table2'
    //   MultiPortSwitch: '<S12>/Multiport Switch1'
    //   Product: '<S39>/Product1'

    switch (rtb_yVarFanCtrl) {
     case 0:
      // SignalConversion generated from: '<S39>/1-D Lookup Table' incorporates:
      //   Selector: '<S39>/Selector1'
      //   Selector: '<S39>/Selector2'

      rtb_InletsLow_0[0] = rtb_Switch2;
      rtb_InletsLow_0[1] = LowestPercentage;
      rtb_TotalPeriod = static_cast<real32_T>(look1_is32lftfIs32_binlca
        (rtDW.yInletsOutputCmd, rtConstP.pooled13, rtb_InletsLow_0, 1U));
      break;

     case 1:
      // SignalConversion generated from: '<S39>/1-D Lookup Table' incorporates:
      //   Selector: '<S39>/Selector1'
      //   Selector: '<S39>/Selector2'

      rtb_InletsLow_0[0] = rtb_Switch2;
      rtb_InletsLow_0[1] = LowestPercentage;
      rtb_TotalPeriod = static_cast<real32_T>(look1_is32lftfIs32_binlca
        (rtDW.yInletsOutputCmd, rtConstP.pooled13, rtb_InletsLow_0, 1U));
      break;

     case 2:
      break;

     default:
      // SignalConversion generated from: '<S39>/1-D Lookup Table2' incorporates:
      //   Inport: '<Root>/ventilationParam'
      //   MATLAB Function: '<S13>/MATLAB Function'
      //   Selector: '<S39>/Selector8'
      //   Selector: '<S39>/Selector9'

      rtb_Selector6_0[0] =
        rtb_ImpAsg_InsertedFor_TotalPeriod_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];
      rtb_Selector6_0[1] =
        rtb_ImpAsg_InsertedFor_ModOnTime_at_inport_0[rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.VarLinkedFan
        - 1];

      // SignalConversion generated from: '<S39>/1-D Lookup Table' incorporates:
      //   Selector: '<S39>/Selector1'
      //   Selector: '<S39>/Selector2'

      rtb_InletsLow_0[0] = rtb_Switch2;
      rtb_InletsLow_0[1] = LowestPercentage;
      rtb_TotalPeriod = look1_iflf_binlca(static_cast<real32_T>
        (rtDW.yInletsOutputCmd) *
        rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.MinVariablePerc,
        rtb_Selector6_0, rtb_InletsLow_0, 1U);
      break;
    }

    // End of MultiPortSwitch: '<S39>/Multiport Switch6'

    // Sum: '<S39>/Sum' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   Selector: '<S39>/Selector6'

    rtb_Selector6 =
      rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletOffset[2]
      + rtb_TotalPeriod;

    // Switch: '<S43>/Switch2' incorporates:
    //   Inport: '<Root>/ventilationParam'
    //   RelationalOperator: '<S43>/LowerRelop1'
    //   Selector: '<S39>/Selector3'

    if (!(rtb_Selector6 >
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMaxOutput
          [2])) {
      // Switch: '<S43>/Switch' incorporates:
      //   RelationalOperator: '<S43>/UpperRelop'
      //   Selector: '<S39>/Selector4'

      if (rtb_Selector6 <
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMinOutput
          [2]) {
        // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
        //   Outport: '<Root>/ventilationOutput'

        rtY.ventilationOutput.fanSchedulerOutput.Inlets[2] =
          rtU.ventilationParam.fanSchedulerParameters.ModulatingFans.InletsMinOutput
          [2];
      } else {
        // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
        //   Outport: '<Root>/ventilationOutput'

        rtY.ventilationOutput.fanSchedulerOutput.Inlets[2] = rtb_Selector6;
      }

      // End of Switch: '<S43>/Switch'
    }

    // End of Switch: '<S43>/Switch2'

    // MultiPortSwitch: '<S10>/Multiport Switch4'
    if (rtb_yAtLeastOneOnOffFanModulates == 0) {
      std::memcpy(&rtb_OnOffFans[0], &rtDW.yOnOffFans_o[0], 20U * sizeof(int32_T));
    } else {
      std::memcpy(&rtb_OnOffFans[0], &rtDW.yOnOffFans[0], 20U * sizeof(int32_T));
    }

    // End of MultiPortSwitch: '<S10>/Multiport Switch4'

    // Chart: '<S7>/StepDelayTimer_Stateflow' incorporates:
    //   Inport: '<Root>/ventilationParam'

    if (rtDW.bitsForTID0.is_active_c8_fanscheduler_lib == 0U) {
      rtDW.bitsForTID0.is_active_c8_fanscheduler_lib = 1U;
      rtDW.bitsForTID0.is_c8_fanscheduler_lib = IN_Initialize;
      std::memset(&rtDW.yOnOffFanCtrl[0], 0, 20U * sizeof(int32_T));
      std::memset(&rtDW.yOnOffFanCtrlPrev[0], 0, 20U * sizeof(int32_T));
    } else if (rtDW.bitsForTID0.is_c8_fanscheduler_lib == 1) {
      rtDW.bitsForTID0.is_c8_fanscheduler_lib = IN_Sequencer;
      rtDW.bitsForTID0.is_OnSequencer = IN_OnSequencerState;
      std::memcpy(&rtDW.yOnOffFanCtrlPrev[0], &rtDW.yOnOffFanCtrl[0], 20U *
                  sizeof(int32_T));
    } else {
      // case IN_Sequencer:
      if (rtDW.bitsForTID0.is_OnSequencer == 1) {
        if (rtDW.Timer >=
            rtU.ventilationParam.fanSchedulerParameters.OnSequenceDelay.SequenceTimeOut)
        {
          rtDW.bitsForTID0.is_OnSequencer = IN_OnSequencerState;
          std::memcpy(&rtDW.yOnOffFanCtrlPrev[0], &rtDW.yOnOffFanCtrl[0], 20U *
                      sizeof(int32_T));
        } else {
          rtDW.Timer += rtDW.Ts_m;
        }
      } else {
        // case IN_OnSequencerState:
        i = 0;
        do {
          exitg1 = 0;
          if ((rtb_OnOffFans[i] == 1) && (rtDW.yOnOffFanCtrlPrev[i] == 0)) {
            rtDW.yOnOffFanCtrl[i] = 1;
            rtDW.bitsForTID0.is_OnSequencer = IN_InhibitOtherFansDuringTimeout;
            rtDW.Timer = 0.0;
            exitg1 = 1;
          } else {
            i++;
            if (i + 1 <= 20) {
            } else {
              rtDW.bitsForTID0.is_OnSequencer = IN_OnSequencerState;
              std::memcpy(&rtDW.yOnOffFanCtrlPrev[0], &rtDW.yOnOffFanCtrl[0],
                          20U * sizeof(int32_T));
              exitg1 = 1;
            }
          }
        } while (exitg1 == 0);
      }

      i = 0;
      do {
        if (rtb_OnOffFans[i] == 0) {
          rtDW.yOnOffFanCtrl[i] = 0;
        }

        i++;
      } while (i + 1 <= 20);
    }

    // End of Chart: '<S7>/StepDelayTimer_Stateflow'

    // Switch generated from: '<S45>/Switch'
    if (rtDW.TunnelPhaseCommand >= 1) {
      // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
      //   Outport: '<Root>/ventilationOutput'

      rtY.ventilationOutput.fanSchedulerOutput.Pressure = rtDW.Pressure;
      rtY.ventilationOutput.fanSchedulerOutput.VentilationCapacity =
        rtDW.VentilationCapacity;
    } else {
      // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
      //   Outport: '<Root>/ventilationOutput'

      rtY.ventilationOutput.fanSchedulerOutput.Pressure = rtDW.Pressure_m;
      rtY.ventilationOutput.fanSchedulerOutput.VentilationCapacity =
        rtDW.VentilationCapacity_g;
    }

    // BusCreator generated from: '<Root>/ventilationOutput' incorporates:
    //   Outport: '<Root>/ventilationOutput'

    std::memcpy(&rtY.ventilationOutput.fanSchedulerOutput.OnOffFans[0],
                &rtDW.yOnOffFanCtrl[0], 20U * sizeof(int32_T));

    // Update for Delay: '<S118>/Delay'
    rtDW.Delay_DSTATE = rtb_PulseGenerator;

    // Update for UnitDelay: '<S45>/Unit Delay2'
    rtDW.UnitDelay2_DSTATE = rtDW.MainState;

    // Update for UnitDelay: '<S45>/Unit Delay3'
    rtDW.UnitDelay3_DSTATE = rtDW.TunnelPhaseCommand;

    // Update for UnitDelay: '<S45>/Unit Delay1'
    rtDW.UnitDelay1_DSTATE = rtDW.MainState_k;

    // Update for UnitDelay: '<S9>/Unit Delay7'
    for (i = 0; i < 8; i++) {
      rtDW.UnitDelay7_DSTATE[i] = rtb_VariableFans[i];
    }

    // End of Update for UnitDelay: '<S9>/Unit Delay7'

    // Update for UnitDelay: '<S9>/Unit Delay4'
    std::memcpy(&rtDW.UnitDelay4_DSTATE[0], &rtb_Switch2_k[0], 20U * sizeof
                (int32_T));

    // Update for UnitDelay: '<S11>/Unit Delay4'
    rtDW.UnitDelay4_DSTATE_i = rtDW.yInletsOutputStatus;
  }

  // Model initialize function
  void FancomVentilationController::initialize()
  {
    // Registration code

    // initialize non-finites
    rt_InitInfAndNaN(sizeof(real_T));
    rtPrevZCX.BucketDampingDiscrete_Trig_ZCE = UNINITIALIZED_ZCSIG;

    // InitializeConditions for UnitDelay: '<S11>/Unit Delay4'
    rtDW.UnitDelay4_DSTATE_i = 1;

    // SystemInitialize for Chart: '<S2>/TunnelSetpointToFanMapping' incorporates:
    //   Inport: '<Root>/ventilationParam'

    MTSetpointToFanMapping_Init(rtDW.TemperatureVentilationTunnelStartOffset,
      rtU.ventilationParam.setpointToFanMappingParameters.TunnelParameters.MaxAllowedStep,
      &rtDW.MainState, rtDW.OnOffFans, rtDW.VariableFans, rtDW.ButterflyValves,
      rtDW.Inlets, &rtDW.Pressure, &rtDW.VentilationCapacity,
      &rtDW.ModulatingPercentage, rtDW.InletsLow, rtDW.InletsHigh,
      rtDW.VariableFansLow, rtDW.VariableFansHigh,
      &rtDW.sf_TunnelSetpointToFanMapping);

    // SystemInitialize for Chart: '<S45>/SwitchDelay'
    rtDW.Ts = 0.1;

    // SystemInitialize for Chart: '<S2>/MTSetpointToFanMapping' incorporates:
    //   Inport: '<Root>/ventilationParam'

    MTSetpointToFanMapping_Init(rtDW.Switch2,
      rtU.ventilationParam.setpointToFanMappingParameters.MTParameters.MaxAllowedStep,
      &rtDW.MainState_k, rtDW.OnOffFans_n, rtDW.VariableFans_b,
      rtDW.ButterflyValves_o, rtDW.Inlets_h, &rtDW.Pressure_m,
      &rtDW.VentilationCapacity_g, &rtDW.ModulatingPercentage_h,
      rtDW.InletsLow_a, rtDW.InletsHigh_d, rtDW.VariableFansLow_o,
      rtDW.VariableFansHigh_m, &rtDW.sf_MTSetpointToFanMapping);

    // SystemInitialize for Chart: '<S13>/VarFansWithModulation'
    rtDW.Ts_j = 0.1;

    // SystemInitialize for Chart: '<S13>/VarFansModulatingWithoutInletLink'
    rtDW.Ts_f = 0.1;

    // SystemInitialize for Chart: '<S10>/OnOffFansWithModulation'
    rtDW.Ts_b = 0.1;

    // SystemInitialize for Chart: '<S6>/InletsModulation'
    rtDW.Ts_k = 0.1;

    // SystemInitialize for Chart: '<S7>/StepDelayTimer_Stateflow'
    rtDW.Ts_m = 0.1;
  }

  // Constructor
  FancomVentilationController::FancomVentilationController() :
    rtU(),
    rtY(),
    rtDW(),
    rtPrevZCX()
  {
    // Currently there is no constructor body generated.
  }

  // Destructor
  FancomVentilationController::~FancomVentilationController()
  {
    // Currently there is no destructor body generated.
  }
}

//
// File trailer for generated code.
//
// [EOF]
//
